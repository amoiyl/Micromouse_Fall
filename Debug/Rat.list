
Rat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003708  08003708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003710  08003710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003724  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003724  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7f9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bce  00000000  00000000  0002c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000967  00000000  00000000  0002f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159d8  00000000  00000000  0002f9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d637  00000000  00000000  00045387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a11f  00000000  00000000  000529be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003390  00000000  00000000  000dcae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000dfe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080036d8 	.word	0x080036d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080036d8 	.word	0x080036d8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000670:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000674:	f000 b970 	b.w	8000958 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9e08      	ldr	r6, [sp, #32]
 8000696:	460d      	mov	r5, r1
 8000698:	4604      	mov	r4, r0
 800069a:	460f      	mov	r7, r1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d14a      	bne.n	8000736 <__udivmoddi4+0xa6>
 80006a0:	428a      	cmp	r2, r1
 80006a2:	4694      	mov	ip, r2
 80006a4:	d965      	bls.n	8000772 <__udivmoddi4+0xe2>
 80006a6:	fab2 f382 	clz	r3, r2
 80006aa:	b143      	cbz	r3, 80006be <__udivmoddi4+0x2e>
 80006ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80006b0:	f1c3 0220 	rsb	r2, r3, #32
 80006b4:	409f      	lsls	r7, r3
 80006b6:	fa20 f202 	lsr.w	r2, r0, r2
 80006ba:	4317      	orrs	r7, r2
 80006bc:	409c      	lsls	r4, r3
 80006be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006c2:	fa1f f58c 	uxth.w	r5, ip
 80006c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80006ca:	0c22      	lsrs	r2, r4, #16
 80006cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80006d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006d4:	fb01 f005 	mul.w	r0, r1, r5
 80006d8:	4290      	cmp	r0, r2
 80006da:	d90a      	bls.n	80006f2 <__udivmoddi4+0x62>
 80006dc:	eb1c 0202 	adds.w	r2, ip, r2
 80006e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80006e4:	f080 811c 	bcs.w	8000920 <__udivmoddi4+0x290>
 80006e8:	4290      	cmp	r0, r2
 80006ea:	f240 8119 	bls.w	8000920 <__udivmoddi4+0x290>
 80006ee:	3902      	subs	r1, #2
 80006f0:	4462      	add	r2, ip
 80006f2:	1a12      	subs	r2, r2, r0
 80006f4:	b2a4      	uxth	r4, r4
 80006f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80006fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80006fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000702:	fb00 f505 	mul.w	r5, r0, r5
 8000706:	42a5      	cmp	r5, r4
 8000708:	d90a      	bls.n	8000720 <__udivmoddi4+0x90>
 800070a:	eb1c 0404 	adds.w	r4, ip, r4
 800070e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000712:	f080 8107 	bcs.w	8000924 <__udivmoddi4+0x294>
 8000716:	42a5      	cmp	r5, r4
 8000718:	f240 8104 	bls.w	8000924 <__udivmoddi4+0x294>
 800071c:	4464      	add	r4, ip
 800071e:	3802      	subs	r0, #2
 8000720:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000724:	1b64      	subs	r4, r4, r5
 8000726:	2100      	movs	r1, #0
 8000728:	b11e      	cbz	r6, 8000732 <__udivmoddi4+0xa2>
 800072a:	40dc      	lsrs	r4, r3
 800072c:	2300      	movs	r3, #0
 800072e:	e9c6 4300 	strd	r4, r3, [r6]
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	428b      	cmp	r3, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0xbc>
 800073a:	2e00      	cmp	r6, #0
 800073c:	f000 80ed 	beq.w	800091a <__udivmoddi4+0x28a>
 8000740:	2100      	movs	r1, #0
 8000742:	e9c6 0500 	strd	r0, r5, [r6]
 8000746:	4608      	mov	r0, r1
 8000748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074c:	fab3 f183 	clz	r1, r3
 8000750:	2900      	cmp	r1, #0
 8000752:	d149      	bne.n	80007e8 <__udivmoddi4+0x158>
 8000754:	42ab      	cmp	r3, r5
 8000756:	d302      	bcc.n	800075e <__udivmoddi4+0xce>
 8000758:	4282      	cmp	r2, r0
 800075a:	f200 80f8 	bhi.w	800094e <__udivmoddi4+0x2be>
 800075e:	1a84      	subs	r4, r0, r2
 8000760:	eb65 0203 	sbc.w	r2, r5, r3
 8000764:	2001      	movs	r0, #1
 8000766:	4617      	mov	r7, r2
 8000768:	2e00      	cmp	r6, #0
 800076a:	d0e2      	beq.n	8000732 <__udivmoddi4+0xa2>
 800076c:	e9c6 4700 	strd	r4, r7, [r6]
 8000770:	e7df      	b.n	8000732 <__udivmoddi4+0xa2>
 8000772:	b902      	cbnz	r2, 8000776 <__udivmoddi4+0xe6>
 8000774:	deff      	udf	#255	; 0xff
 8000776:	fab2 f382 	clz	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	f040 8090 	bne.w	80008a0 <__udivmoddi4+0x210>
 8000780:	1a8a      	subs	r2, r1, r2
 8000782:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000786:	fa1f fe8c 	uxth.w	lr, ip
 800078a:	2101      	movs	r1, #1
 800078c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000790:	fb07 2015 	mls	r0, r7, r5, r2
 8000794:	0c22      	lsrs	r2, r4, #16
 8000796:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800079a:	fb0e f005 	mul.w	r0, lr, r5
 800079e:	4290      	cmp	r0, r2
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x124>
 80007a2:	eb1c 0202 	adds.w	r2, ip, r2
 80007a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x122>
 80007ac:	4290      	cmp	r0, r2
 80007ae:	f200 80cb 	bhi.w	8000948 <__udivmoddi4+0x2b8>
 80007b2:	4645      	mov	r5, r8
 80007b4:	1a12      	subs	r2, r2, r0
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80007bc:	fb07 2210 	mls	r2, r7, r0, r2
 80007c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007c4:	fb0e fe00 	mul.w	lr, lr, r0
 80007c8:	45a6      	cmp	lr, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x14e>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x14c>
 80007d6:	45a6      	cmp	lr, r4
 80007d8:	f200 80bb 	bhi.w	8000952 <__udivmoddi4+0x2c2>
 80007dc:	4610      	mov	r0, r2
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007e6:	e79f      	b.n	8000728 <__udivmoddi4+0x98>
 80007e8:	f1c1 0720 	rsb	r7, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80007f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f6:	fa05 f401 	lsl.w	r4, r5, r1
 80007fa:	fa20 f307 	lsr.w	r3, r0, r7
 80007fe:	40fd      	lsrs	r5, r7
 8000800:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000804:	4323      	orrs	r3, r4
 8000806:	fbb5 f8f9 	udiv	r8, r5, r9
 800080a:	fa1f fe8c 	uxth.w	lr, ip
 800080e:	fb09 5518 	mls	r5, r9, r8, r5
 8000812:	0c1c      	lsrs	r4, r3, #16
 8000814:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000818:	fb08 f50e 	mul.w	r5, r8, lr
 800081c:	42a5      	cmp	r5, r4
 800081e:	fa02 f201 	lsl.w	r2, r2, r1
 8000822:	fa00 f001 	lsl.w	r0, r0, r1
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b0>
 8000828:	eb1c 0404 	adds.w	r4, ip, r4
 800082c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000830:	f080 8088 	bcs.w	8000944 <__udivmoddi4+0x2b4>
 8000834:	42a5      	cmp	r5, r4
 8000836:	f240 8085 	bls.w	8000944 <__udivmoddi4+0x2b4>
 800083a:	f1a8 0802 	sub.w	r8, r8, #2
 800083e:	4464      	add	r4, ip
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	b29d      	uxth	r5, r3
 8000844:	fbb4 f3f9 	udiv	r3, r4, r9
 8000848:	fb09 4413 	mls	r4, r9, r3, r4
 800084c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000850:	fb03 fe0e 	mul.w	lr, r3, lr
 8000854:	45a6      	cmp	lr, r4
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1da>
 8000858:	eb1c 0404 	adds.w	r4, ip, r4
 800085c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000860:	d26c      	bcs.n	800093c <__udivmoddi4+0x2ac>
 8000862:	45a6      	cmp	lr, r4
 8000864:	d96a      	bls.n	800093c <__udivmoddi4+0x2ac>
 8000866:	3b02      	subs	r3, #2
 8000868:	4464      	add	r4, ip
 800086a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800086e:	fba3 9502 	umull	r9, r5, r3, r2
 8000872:	eba4 040e 	sub.w	r4, r4, lr
 8000876:	42ac      	cmp	r4, r5
 8000878:	46c8      	mov	r8, r9
 800087a:	46ae      	mov	lr, r5
 800087c:	d356      	bcc.n	800092c <__udivmoddi4+0x29c>
 800087e:	d053      	beq.n	8000928 <__udivmoddi4+0x298>
 8000880:	b156      	cbz	r6, 8000898 <__udivmoddi4+0x208>
 8000882:	ebb0 0208 	subs.w	r2, r0, r8
 8000886:	eb64 040e 	sbc.w	r4, r4, lr
 800088a:	fa04 f707 	lsl.w	r7, r4, r7
 800088e:	40ca      	lsrs	r2, r1
 8000890:	40cc      	lsrs	r4, r1
 8000892:	4317      	orrs	r7, r2
 8000894:	e9c6 7400 	strd	r7, r4, [r6]
 8000898:	4618      	mov	r0, r3
 800089a:	2100      	movs	r1, #0
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	f1c3 0120 	rsb	r1, r3, #32
 80008a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008a8:	fa20 f201 	lsr.w	r2, r0, r1
 80008ac:	fa25 f101 	lsr.w	r1, r5, r1
 80008b0:	409d      	lsls	r5, r3
 80008b2:	432a      	orrs	r2, r5
 80008b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b8:	fa1f fe8c 	uxth.w	lr, ip
 80008bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c0:	fb07 1510 	mls	r5, r7, r0, r1
 80008c4:	0c11      	lsrs	r1, r2, #16
 80008c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008ca:	fb00 f50e 	mul.w	r5, r0, lr
 80008ce:	428d      	cmp	r5, r1
 80008d0:	fa04 f403 	lsl.w	r4, r4, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x258>
 80008d6:	eb1c 0101 	adds.w	r1, ip, r1
 80008da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008de:	d22f      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 80008e0:	428d      	cmp	r5, r1
 80008e2:	d92d      	bls.n	8000940 <__udivmoddi4+0x2b0>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	1b49      	subs	r1, r1, r5
 80008ea:	b292      	uxth	r2, r2
 80008ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80008f0:	fb07 1115 	mls	r1, r7, r5, r1
 80008f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008f8:	fb05 f10e 	mul.w	r1, r5, lr
 80008fc:	4291      	cmp	r1, r2
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x282>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000908:	d216      	bcs.n	8000938 <__udivmoddi4+0x2a8>
 800090a:	4291      	cmp	r1, r2
 800090c:	d914      	bls.n	8000938 <__udivmoddi4+0x2a8>
 800090e:	3d02      	subs	r5, #2
 8000910:	4462      	add	r2, ip
 8000912:	1a52      	subs	r2, r2, r1
 8000914:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000918:	e738      	b.n	800078c <__udivmoddi4+0xfc>
 800091a:	4631      	mov	r1, r6
 800091c:	4630      	mov	r0, r6
 800091e:	e708      	b.n	8000732 <__udivmoddi4+0xa2>
 8000920:	4639      	mov	r1, r7
 8000922:	e6e6      	b.n	80006f2 <__udivmoddi4+0x62>
 8000924:	4610      	mov	r0, r2
 8000926:	e6fb      	b.n	8000720 <__udivmoddi4+0x90>
 8000928:	4548      	cmp	r0, r9
 800092a:	d2a9      	bcs.n	8000880 <__udivmoddi4+0x1f0>
 800092c:	ebb9 0802 	subs.w	r8, r9, r2
 8000930:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000934:	3b01      	subs	r3, #1
 8000936:	e7a3      	b.n	8000880 <__udivmoddi4+0x1f0>
 8000938:	4645      	mov	r5, r8
 800093a:	e7ea      	b.n	8000912 <__udivmoddi4+0x282>
 800093c:	462b      	mov	r3, r5
 800093e:	e794      	b.n	800086a <__udivmoddi4+0x1da>
 8000940:	4640      	mov	r0, r8
 8000942:	e7d1      	b.n	80008e8 <__udivmoddi4+0x258>
 8000944:	46d0      	mov	r8, sl
 8000946:	e77b      	b.n	8000840 <__udivmoddi4+0x1b0>
 8000948:	3d02      	subs	r5, #2
 800094a:	4462      	add	r2, ip
 800094c:	e732      	b.n	80007b4 <__udivmoddi4+0x124>
 800094e:	4608      	mov	r0, r1
 8000950:	e70a      	b.n	8000768 <__udivmoddi4+0xd8>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	e742      	b.n	80007de <__udivmoddi4+0x14e>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <getRightEncoderCounts>:
#include "encoders.h"

/*
 * Implement this function so it returns the right encoder value
 */
int16_t getRightEncoderCounts() {
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8000960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	b21b      	sxth	r3, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <getLeftEncoderCounts>:

/*
 * Implement this function so it returns the left encoder value
 */
int16_t getLeftEncoderCounts() {
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	return TIM1->CNT;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <getLeftEncoderCounts+0x14>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	b21b      	sxth	r3, r3
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40010000 	.word	0x40010000
 800098c:	00000000 	.word	0x00000000

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fcfc 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f848 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 f9f6 	bl	8000d8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a0:	f000 f9ca 	bl	8000d38 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009a4:	f000 f8ac 	bl	8000b00 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009a8:	f000 f902 	bl	8000bb0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80009ac:	f000 f954 	bl	8000c58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80009b0:	213c      	movs	r1, #60	; 0x3c
 80009b2:	4819      	ldr	r0, [pc, #100]	; (8000a18 <main+0x88>)
 80009b4:	f001 fe64 	bl	8002680 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80009b8:	213c      	movs	r1, #60	; 0x3c
 80009ba:	4818      	ldr	r0, [pc, #96]	; (8000a1c <main+0x8c>)
 80009bc:	f001 fe60 	bl	8002680 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4817      	ldr	r0, [pc, #92]	; (8000a20 <main+0x90>)
 80009c4:	f001 fd06 	bl	80023d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	4815      	ldr	r0, [pc, #84]	; (8000a20 <main+0x90>)
 80009cc:	f001 fd02 	bl	80023d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80009d0:	2108      	movs	r1, #8
 80009d2:	4813      	ldr	r0, [pc, #76]	; (8000a20 <main+0x90>)
 80009d4:	f001 fcfe 	bl	80023d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80009d8:	210c      	movs	r1, #12
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <main+0x90>)
 80009dc:	f001 fcfa 	bl	80023d4 <HAL_TIM_PWM_Start>

	setMotorRPWM(.8);
 80009e0:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000a10 <main+0x80>
 80009e4:	f000 fac0 	bl	8000f68 <setMotorRPWM>
	setMotorLPWM(.8);
 80009e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8000a10 <main+0x80>
 80009ec:	f000 fa94 	bl	8000f18 <setMotorLPWM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		left_counts = getLeftEncoderCounts();
 80009f0:	f7ff ffc0 	bl	8000974 <getLeftEncoderCounts>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <main+0x94>)
 80009fa:	801a      	strh	r2, [r3, #0]
		right_counts = getRightEncoderCounts();
 80009fc:	f7ff ffae 	bl	800095c <getRightEncoderCounts>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <main+0x98>)
 8000a06:	801a      	strh	r2, [r3, #0]
		left_counts = getLeftEncoderCounts();
 8000a08:	e7f2      	b.n	80009f0 <main+0x60>
 8000a0a:	bf00      	nop
 8000a0c:	f3af 8000 	nop.w
 8000a10:	9999999a 	.word	0x9999999a
 8000a14:	3fe99999 	.word	0x3fe99999
 8000a18:	20000028 	.word	0x20000028
 8000a1c:	20000070 	.word	0x20000070
 8000a20:	200000b8 	.word	0x200000b8
 8000a24:	20000144 	.word	0x20000144
 8000a28:	20000146 	.word	0x20000146

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fe20 	bl	8003680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <SystemClock_Config+0xd0>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SystemClock_Config+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ffa6 	bl	8001a04 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000abe:	f000 f9f5 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fa08 	bl	8001ef4 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 f9df 	bl	8000eac <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2224      	movs	r2, #36	; 0x24
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fdb6 	bl	8003680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MX_TIM1_Init+0xac>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b50:	2301      	movs	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b60:	2301      	movs	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	4619      	mov	r1, r3
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b74:	f001 fcde 	bl	8002534 <HAL_TIM_Encoder_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b7e:	f000 f995 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b90:	f002 fa32 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000b9a:	f000 f987 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3730      	adds	r7, #48	; 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000028 	.word	0x20000028
 8000bac:	40010000 	.word	0x40010000

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2224      	movs	r2, #36	; 0x24
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fd5e 	bl	8003680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000c20:	f001 fc88 	bl	8002534 <HAL_TIM_Encoder_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c2a:	f000 f93f 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_TIM2_Init+0xa4>)
 8000c3c:	f002 f9dc 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c46:	f000 f931 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000070 	.word	0x20000070

08000c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000c7c:	4a2d      	ldr	r2, [pc, #180]	; (8000d34 <MX_TIM4_Init+0xdc>)
 8000c7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000c8e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000c92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ca0:	4823      	ldr	r0, [pc, #140]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000ca2:	f001 fb47 	bl	8002334 <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000cac:	f000 f8fe 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000cc0:	f002 f99a 	bl	8002ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000cca:	f000 f8ef 	bl	8000eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4812      	ldr	r0, [pc, #72]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000ce6:	f001 fe61 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000cf0:	f000 f8dc 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000cfc:	f001 fe56 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d06:	f000 f8d1 	bl	8000eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000d12:	f001 fe4b 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000d1c:	f000 f8c6 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <MX_TIM4_Init+0xd8>)
 8000d22:	f000 fa3b 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000b8 	.word	0x200000b8
 8000d34:	40000800 	.word	0x40000800

08000d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_USART2_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f002 f9c4 	bl	80030fc <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f897 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000100 	.word	0x20000100
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_GPIO_Init+0xe0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2120      	movs	r1, #32
 8000e16:	4816      	ldr	r0, [pc, #88]	; (8000e70 <MX_GPIO_Init+0xe4>)
 8000e18:	f000 fdc2 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <MX_GPIO_Init+0xe8>)
 8000e34:	f000 fc30 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e38:	2320      	movs	r3, #32
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <MX_GPIO_Init+0xe4>)
 8000e50:	f000 fc22 	bl	8001698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2028      	movs	r0, #40	; 0x28
 8000e5a:	f000 fbe6 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e5e:	2028      	movs	r0, #40	; 0x28
 8000e60:	f000 fbff 	bl	8001662 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020800 	.word	0x40020800

08000e78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == Button_Pin) {
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e88:	d105      	bne.n	8000e96 <HAL_GPIO_EXTI_Callback+0x1e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e90:	f000 fd86 	bl	80019a0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000e9c:	f000 fd80 	bl	80019a0 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40020000 	.word	0x40020000

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX) {
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff faec 	bl	80004a0 <__aeabi_f2d>
 8000ec8:	a30f      	add	r3, pc, #60	; (adr r3, 8000f08 <limitPWM+0x50>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fbbd 	bl	800064c <__aeabi_dcmpgt>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <limitPWM+0x24>
		return  PWM_MAX;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <limitPWM+0x58>)
 8000eda:	e00d      	b.n	8000ef8 <limitPWM+0x40>
	}
	else if (pwm > PWM_MAX) {
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fadf 	bl	80004a0 <__aeabi_f2d>
 8000ee2:	a309      	add	r3, pc, #36	; (adr r3, 8000f08 <limitPWM+0x50>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fbb0 	bl	800064c <__aeabi_dcmpgt>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <limitPWM+0x3e>
		return -1*PWM_MAX;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <limitPWM+0x5c>)
 8000ef4:	e000      	b.n	8000ef8 <limitPWM+0x40>
	}
	else {
		return pwm;
 8000ef6:	687b      	ldr	r3, [r7, #4]
	}
}
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb0 0a67 	vmov.f32	s0, s15
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	9999999a 	.word	0x9999999a
 8000f0c:	3fe99999 	.word	0x3fe99999
 8000f10:	3f4ccccd 	.word	0x3f4ccccd
 8000f14:	bf4ccccd 	.word	0xbf4ccccd

08000f18 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8000f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	da00      	bge.n	8000f32 <setMotorLPWM+0x1a>

//	} else {
//		TIM4->CCR3 = 0;
//		TIM4->CCR4 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8000f30:	e012      	b.n	8000f58 <setMotorLPWM+0x40>
		TIM4->CCR4 = 0;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <setMotorLPWM+0x48>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
		TIM4->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000f38:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f3c:	f7ff ffbc 	bl	8000eb8 <limitPWM>
 8000f40:	eef0 7a40 	vmov.f32	s15, s0
 8000f44:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f64 <setMotorLPWM+0x4c>
 8000f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <setMotorLPWM+0x48>)
 8000f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f52:	ee17 2a90 	vmov	r2, s15
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40000800 	.word	0x40000800
 8000f64:	4547f000 	.word	0x4547f000

08000f68 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	da00      	bge.n	8000f82 <setMotorRPWM+0x1a>

//	}// else {
//		TIM4->CCR1 = 0;
//		TIM4->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8000f80:	e012      	b.n	8000fa8 <setMotorRPWM+0x40>
		TIM4->CCR2 = 0;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <setMotorRPWM+0x48>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000f88:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f8c:	f7ff ff94 	bl	8000eb8 <limitPWM>
 8000f90:	eef0 7a40 	vmov.f32	s15, s0
 8000f94:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fb4 <setMotorRPWM+0x4c>
 8000f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <setMotorRPWM+0x48>)
 8000f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa2:	ee17 2a90 	vmov	r2, s15
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40000800 	.word	0x40000800
 8000fb4:	4547f000 	.word	0x4547f000

08000fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f000 fb0c 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	; 0x30
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a32      	ldr	r2, [pc, #200]	; (80010f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d12d      	bne.n	8001086 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderC1_Pin|LeftEncoderC2_Pin;
 8001062:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	481e      	ldr	r0, [pc, #120]	; (80010f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001080:	f000 fb0a 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001084:	e030      	b.n	80010e8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800108e:	d12b      	bne.n	80010e8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderC1_Pin|RightEncoderC2_Pin;
 80010c8:	2303      	movs	r3, #3
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 80010e4:	f000 fad8 	bl	8001698 <HAL_GPIO_Init>
}
 80010e8:	bf00      	nop
 80010ea:	3730      	adds	r7, #48	; 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000

080010fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_TIM_PWM_MspInit+0x94>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d134      	bne.n	8001188 <HAL_TIM_PWM_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_TIM_PWM_MspInit+0x98>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_TIM_PWM_MspInit+0x98>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_TIM_PWM_MspInit+0x98>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_TIM_PWM_MspInit+0x98>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_TIM_PWM_MspInit+0x98>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_TIM_PWM_MspInit+0x98>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001168:	2302      	movs	r3, #2
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_TIM_PWM_MspInit+0x9c>)
 8001174:	f000 fa90 	bl	8001698 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	201e      	movs	r0, #30
 800117e:	f000 fa54 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001182:	201e      	movs	r0, #30
 8001184:	f000 fa6d 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40000800 	.word	0x40000800
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400

0800119c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <HAL_TIM_MspPostInit+0x68>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d11e      	bne.n	80011fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_TIM_MspPostInit+0x6c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_TIM_MspPostInit+0x6c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_TIM_MspPostInit+0x6c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80011da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80011de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_TIM_MspPostInit+0x70>)
 80011f8:	f000 fa4e 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40000800 	.word	0x40000800
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_UART_MspInit+0x88>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126a:	230c      	movs	r3, #12
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127a:	2307      	movs	r3, #7
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_MspInit+0x8c>)
 8001286:	f000 fa07 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004400 	.word	0x40004400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f8a2 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <TIM4_IRQHandler+0x10>)
 80012fa:	f001 fa4f 	bl	800279c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000b8 	.word	0x200000b8

08001308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 800130c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001310:	f000 fb60 	bl	80019d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001366:	f7ff ffd7 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f002 f991 	bl	8003690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fb0f 	bl	8000990 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001380:	08003718 	.word	0x08003718
  ldr r2, =_sbss
 8001384:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001388:	2000014c 	.word	0x2000014c

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f92b 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fdf8 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f943 	bl	800167e <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001410:	f000 f90b 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000000 	.word	0x20000000
 800142c:	20000008 	.word	0x20000008
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008
 8001458:	20000148 	.word	0x20000148

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000148 	.word	0x20000148

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e159      	b.n	8001968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8148 	bne.w	8001962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a2 	beq.w	8001962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b54      	ldr	r3, [pc, #336]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d019      	beq.n	800189a <HAL_GPIO_Init+0x202>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x1fe>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2f8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a46      	ldr	r2, [pc, #280]	; (8001994 <HAL_GPIO_Init+0x2fc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x1f6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a45      	ldr	r2, [pc, #276]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x1f2>
 8001886:	2304      	movs	r3, #4
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188a:	2307      	movs	r3, #7
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x204>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_GPIO_Init+0x304>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <HAL_GPIO_Init+0x304>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x304>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_GPIO_Init+0x304>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x304>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_GPIO_Init+0x304>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_GPIO_Init+0x304>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_GPIO_Init+0x304>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f aea2 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40013c00 	.word	0x40013c00

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa40 	bl	8000e78 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e267      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d075      	beq.n	8001b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a22:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d00c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2e:	4b85      	ldr	r3, [pc, #532]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d112      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a46:	d10b      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d05b      	beq.n	8001b0c <HAL_RCC_OscConfig+0x108>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d157      	bne.n	8001b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e242      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_OscConfig+0x74>
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a75      	ldr	r2, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xb0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x98>
 8001a82:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6f      	ldr	r2, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6c      	ldr	r2, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xb0>
 8001a9c:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a68      	ldr	r2, [pc, #416]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fcce 	bl	800145c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fcca 	bl	800145c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e207      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xc0>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fcba 	bl	800145c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fcb6 	bl	800145c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1f3      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0xe8>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d063      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b32:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x152>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1c7      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4937      	ldr	r1, [pc, #220]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_RCC_OscConfig+0x244>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fc6f 	bl	800145c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fc6b 	bl	800145c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1a8      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4925      	ldr	r1, [pc, #148]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_OscConfig+0x244>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fc4e 	bl	800145c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fc4a 	bl	800145c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e187      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d036      	beq.n	8001c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d016      	beq.n	8001c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_RCC_OscConfig+0x248>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc2e 	bl	800145c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc2a 	bl	800145c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e167      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x240>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x200>
 8001c22:	e01b      	b.n	8001c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_OscConfig+0x248>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fc17 	bl	800145c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	e00e      	b.n	8001c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff fc13 	bl	800145c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d907      	bls.n	8001c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e150      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	42470000 	.word	0x42470000
 8001c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ea      	bne.n	8001c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8097 	beq.w	8001d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10f      	bne.n	8001c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b7d      	ldr	r3, [pc, #500]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a7c      	ldr	r2, [pc, #496]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c96:	2301      	movs	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca6:	4b74      	ldr	r3, [pc, #464]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a73      	ldr	r2, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fbd3 	bl	800145c <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cba:	f7ff fbcf 	bl	800145c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e10c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x474>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x2ea>
 8001ce0:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a63      	ldr	r2, [pc, #396]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x324>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x30c>
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x324>
 8001d10:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a54      	ldr	r2, [pc, #336]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff fb94 	bl	800145c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff fb90 	bl	800145c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0cb      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ee      	beq.n	8001d38 <HAL_RCC_OscConfig+0x334>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fb7e 	bl	800145c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff fb7a 	bl	800145c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0b5      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ee      	bne.n	8001d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	4a38      	ldr	r2, [pc, #224]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a1 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d05c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d141      	bne.n	8001e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_RCC_OscConfig+0x478>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb4e 	bl	800145c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff fb4a 	bl	800145c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e087      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	491b      	ldr	r1, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x478>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff fb23 	bl	800145c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff fb1f 	bl	800145c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e05c      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x416>
 8001e38:	e054      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x478>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fb0c 	bl	800145c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff fb08 	bl	800145c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e045      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x444>
 8001e66:	e03d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e038      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x4ec>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d028      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d121      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d11a      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d111      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0cc      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b68      	ldr	r3, [pc, #416]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d90c      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b65      	ldr	r3, [pc, #404]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0b8      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	494d      	ldr	r1, [pc, #308]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d044      	beq.n	8002014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d119      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e067      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4934      	ldr	r1, [pc, #208]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe4:	f7ff fa3a 	bl	800145c <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7ff fa36 	bl	800145c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e04f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d20c      	bcs.n	800203c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e032      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4916      	ldr	r1, [pc, #88]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207a:	f000 f821 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	490a      	ldr	r1, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	5ccb      	ldrb	r3, [r1, r3]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f99a 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023c00 	.word	0x40023c00
 80020b0:	40023800 	.word	0x40023800
 80020b4:	080036f0 	.word	0x080036f0
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c4:	b094      	sub	sp, #80	; 0x50
 80020c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	647b      	str	r3, [r7, #68]	; 0x44
 80020cc:	2300      	movs	r3, #0
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d0:	2300      	movs	r3, #0
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d8:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d00d      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x40>
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	f200 80e1 	bhi.w	80022ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x3a>
 80020f2:	e0db      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f4:	4b73      	ldr	r3, [pc, #460]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80020f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020f8:	e0db      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020fa:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80020fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020fe:	e0d8      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002100:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210a:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002116:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	099b      	lsrs	r3, r3, #6
 800211c:	2200      	movs	r2, #0
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002120:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
 800212a:	2300      	movs	r3, #0
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
 800212e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002132:	4622      	mov	r2, r4
 8002134:	462b      	mov	r3, r5
 8002136:	f04f 0000 	mov.w	r0, #0
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	0159      	lsls	r1, r3, #5
 8002140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002144:	0150      	lsls	r0, r2, #5
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4621      	mov	r1, r4
 800214c:	1a51      	subs	r1, r2, r1
 800214e:	6139      	str	r1, [r7, #16]
 8002150:	4629      	mov	r1, r5
 8002152:	eb63 0301 	sbc.w	r3, r3, r1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002164:	4659      	mov	r1, fp
 8002166:	018b      	lsls	r3, r1, #6
 8002168:	4651      	mov	r1, sl
 800216a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800216e:	4651      	mov	r1, sl
 8002170:	018a      	lsls	r2, r1, #6
 8002172:	4651      	mov	r1, sl
 8002174:	ebb2 0801 	subs.w	r8, r2, r1
 8002178:	4659      	mov	r1, fp
 800217a:	eb63 0901 	sbc.w	r9, r3, r1
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800218e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002192:	4690      	mov	r8, r2
 8002194:	4699      	mov	r9, r3
 8002196:	4623      	mov	r3, r4
 8002198:	eb18 0303 	adds.w	r3, r8, r3
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	462b      	mov	r3, r5
 80021a0:	eb49 0303 	adc.w	r3, r9, r3
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021b2:	4629      	mov	r1, r5
 80021b4:	024b      	lsls	r3, r1, #9
 80021b6:	4621      	mov	r1, r4
 80021b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021bc:	4621      	mov	r1, r4
 80021be:	024a      	lsls	r2, r1, #9
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c6:	2200      	movs	r2, #0
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d0:	f7fe fa46 	bl	8000660 <__aeabi_uldivmod>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4613      	mov	r3, r2
 80021da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021dc:	e058      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	2200      	movs	r2, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	4611      	mov	r1, r2
 80021ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021f8:	4642      	mov	r2, r8
 80021fa:	464b      	mov	r3, r9
 80021fc:	f04f 0000 	mov.w	r0, #0
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	0159      	lsls	r1, r3, #5
 8002206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800220a:	0150      	lsls	r0, r2, #5
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4641      	mov	r1, r8
 8002212:	ebb2 0a01 	subs.w	sl, r2, r1
 8002216:	4649      	mov	r1, r9
 8002218:	eb63 0b01 	sbc.w	fp, r3, r1
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800222c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002230:	ebb2 040a 	subs.w	r4, r2, sl
 8002234:	eb63 050b 	sbc.w	r5, r3, fp
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	00eb      	lsls	r3, r5, #3
 8002242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002246:	00e2      	lsls	r2, r4, #3
 8002248:	4614      	mov	r4, r2
 800224a:	461d      	mov	r5, r3
 800224c:	4643      	mov	r3, r8
 800224e:	18e3      	adds	r3, r4, r3
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	464b      	mov	r3, r9
 8002254:	eb45 0303 	adc.w	r3, r5, r3
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002266:	4629      	mov	r1, r5
 8002268:	028b      	lsls	r3, r1, #10
 800226a:	4621      	mov	r1, r4
 800226c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002270:	4621      	mov	r1, r4
 8002272:	028a      	lsls	r2, r1, #10
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227a:	2200      	movs	r2, #0
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	61fa      	str	r2, [r7, #28]
 8002280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002284:	f7fe f9ec 	bl	8000660 <__aeabi_uldivmod>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4613      	mov	r3, r2
 800228e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	3301      	adds	r3, #1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3750      	adds	r7, #80	; 0x50
 80022b8:	46bd      	mov	sp, r7
 80022ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	007a1200 	.word	0x007a1200

080022cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022e8:	f7ff fff0 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	0a9b      	lsrs	r3, r3, #10
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4903      	ldr	r1, [pc, #12]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	08003700 	.word	0x08003700

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002310:	f7ff ffdc 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0b5b      	lsrs	r3, r3, #13
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	08003700 	.word	0x08003700

08002334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e041      	b.n	80023ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fece 	bl	80010fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4610      	mov	r0, r2
 8002374:	f000 fc0e 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_TIM_PWM_Start+0x24>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e022      	b.n	800243e <HAL_TIM_PWM_Start+0x6a>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d109      	bne.n	8002412 <HAL_TIM_PWM_Start+0x3e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e015      	b.n	800243e <HAL_TIM_PWM_Start+0x6a>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d109      	bne.n	800242c <HAL_TIM_PWM_Start+0x58>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e008      	b.n	800243e <HAL_TIM_PWM_Start+0x6a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e068      	b.n	8002518 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <HAL_TIM_PWM_Start+0x82>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	e013      	b.n	800247e <HAL_TIM_PWM_Start+0xaa>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Start+0x92>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002464:	e00b      	b.n	800247e <HAL_TIM_PWM_Start+0xaa>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Start+0xa2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002474:	e003      	b.n	800247e <HAL_TIM_PWM_Start+0xaa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fd90 	bl	8002fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a23      	ldr	r2, [pc, #140]	; (8002520 <HAL_TIM_PWM_Start+0x14c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d107      	bne.n	80024a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_TIM_PWM_Start+0x14c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d018      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x10e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d013      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x10e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a19      	ldr	r2, [pc, #100]	; (8002524 <HAL_TIM_PWM_Start+0x150>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00e      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x10e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a17      	ldr	r2, [pc, #92]	; (8002528 <HAL_TIM_PWM_Start+0x154>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x10e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_TIM_PWM_Start+0x158>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d004      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x10e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_TIM_PWM_Start+0x15c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d111      	bne.n	8002506 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d010      	beq.n	8002516 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002504:	e007      	b.n	8002516 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40010000 	.word	0x40010000
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40000c00 	.word	0x40000c00
 8002530:	40014000 	.word	0x40014000

08002534 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e097      	b.n	8002678 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe fd53 	bl	8001008 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002578:	f023 0307 	bic.w	r3, r3, #7
 800257c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f000 fb03 	bl	8002b94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	4313      	orrs	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025d4:	f023 030c 	bic.w	r3, r3, #12
 80025d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	4313      	orrs	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	011a      	lsls	r2, r3, #4
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	031b      	lsls	r3, r3, #12
 8002604:	4313      	orrs	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002612:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800261a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	4313      	orrs	r3, r2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002690:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002698:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d110      	bne.n	80026d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80026b6:	7b7b      	ldrb	r3, [r7, #13]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d001      	beq.n	80026c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e069      	b.n	8002794 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d0:	e031      	b.n	8002736 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d110      	bne.n	80026fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026d8:	7bbb      	ldrb	r3, [r7, #14]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026de:	7b3b      	ldrb	r3, [r7, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e055      	b.n	8002794 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f8:	e01d      	b.n	8002736 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d108      	bne.n	8002712 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002700:	7bbb      	ldrb	r3, [r7, #14]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002706:	7b7b      	ldrb	r3, [r7, #13]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d102      	bne.n	8002712 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800270c:	7b3b      	ldrb	r3, [r7, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e03e      	b.n	8002794 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_TIM_Encoder_Start+0xc4>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d008      	beq.n	8002754 <HAL_TIM_Encoder_Start+0xd4>
 8002742:	e00f      	b.n	8002764 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fc2d 	bl	8002fac <TIM_CCxChannelCmd>
      break;
 8002752:	e016      	b.n	8002782 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	2104      	movs	r1, #4
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fc25 	bl	8002fac <TIM_CCxChannelCmd>
      break;
 8002762:	e00e      	b.n	8002782 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fc1d 	bl	8002fac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	2104      	movs	r1, #4
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fc16 	bl	8002fac <TIM_CCxChannelCmd>
      break;
 8002780:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d122      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d11b      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0202 	mvn.w	r2, #2
 80027c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f9ba 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f9ac 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f9bd 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0204 	mvn.w	r2, #4
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f990 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f982 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f993 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0208 	mvn.w	r2, #8
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f966 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f958 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f969 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0210 	mvn.w	r2, #16
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2208      	movs	r2, #8
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f93c 	bl	8002b58 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f92e 	bl	8002b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f93f 	bl	8002b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0201 	mvn.w	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f908 	bl	8002b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fbce 	bl	80030e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d107      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f904 	bl	8002b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b20      	cmp	r3, #32
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b20      	cmp	r3, #32
 8002992:	d107      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0220 	mvn.w	r2, #32
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fb98 	bl	80030d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0ae      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	f200 809f 	bhi.w	8002b18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002b19 	.word	0x08002b19
 80029e8:	08002b19 	.word	0x08002b19
 80029ec:	08002b19 	.word	0x08002b19
 80029f0:	08002a55 	.word	0x08002a55
 80029f4:	08002b19 	.word	0x08002b19
 80029f8:	08002b19 	.word	0x08002b19
 80029fc:	08002b19 	.word	0x08002b19
 8002a00:	08002a97 	.word	0x08002a97
 8002a04:	08002b19 	.word	0x08002b19
 8002a08:	08002b19 	.word	0x08002b19
 8002a0c:	08002b19 	.word	0x08002b19
 8002a10:	08002ad7 	.word	0x08002ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f93a 	bl	8002c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	619a      	str	r2, [r3, #24]
      break;
 8002a52:	e064      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f980 	bl	8002d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6999      	ldr	r1, [r3, #24]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	619a      	str	r2, [r3, #24]
      break;
 8002a94:	e043      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f9cb 	bl	8002e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0208 	orr.w	r2, r2, #8
 8002ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0204 	bic.w	r2, r2, #4
 8002ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69d9      	ldr	r1, [r3, #28]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	61da      	str	r2, [r3, #28]
      break;
 8002ad4:	e023      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fa15 	bl	8002f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	021a      	lsls	r2, r3, #8
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	61da      	str	r2, [r3, #28]
      break;
 8002b16:	e002      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <TIM_Base_SetConfig+0xe8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a30      	ldr	r2, [pc, #192]	; (8002c80 <TIM_Base_SetConfig+0xec>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <TIM_Base_SetConfig+0xf0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01b      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d017      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <TIM_Base_SetConfig+0xe8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <TIM_Base_SetConfig+0xec>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <TIM_Base_SetConfig+0xf0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <TIM_Base_SetConfig+0xf4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <TIM_Base_SetConfig+0xf8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <TIM_Base_SetConfig+0xfc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d108      	bne.n	8002c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d103      	bne.n	8002c64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	615a      	str	r2, [r3, #20]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	40014800 	.word	0x40014800

08002c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0201 	bic.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f023 0302 	bic.w	r3, r3, #2
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <TIM_OC1_SetConfig+0xc8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10c      	bne.n	8002d0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0308 	bic.w	r3, r3, #8
 8002cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <TIM_OC1_SetConfig+0xc8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40010000 	.word	0x40010000

08002d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0210 	bic.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f023 0320 	bic.w	r3, r3, #32
 8002daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <TIM_OC2_SetConfig+0xd4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10d      	bne.n	8002ddc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <TIM_OC2_SetConfig+0xd4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d113      	bne.n	8002e0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000

08002e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <TIM_OC3_SetConfig+0xd0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10d      	bne.n	8002eb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <TIM_OC3_SetConfig+0xd0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d113      	bne.n	8002ee2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	621a      	str	r2, [r3, #32]
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40010000 	.word	0x40010000

08002f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	031b      	lsls	r3, r3, #12
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <TIM_OC4_SetConfig+0x9c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d109      	bne.n	8002f80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40010000 	.word	0x40010000

08002fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800300c:	2302      	movs	r3, #2
 800300e:	e050      	b.n	80030b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d018      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d013      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00e      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10c      	bne.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	4313      	orrs	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	40014000 	.word	0x40014000

080030d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e03f      	b.n	800318e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe f874 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f829 	bl	8003198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b0c0      	sub	sp, #256	; 0x100
 800319e:	af00      	add	r7, sp, #0
 80031a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	ea40 0301 	orr.w	r3, r0, r1
 80031c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031f0:	f021 010c 	bic.w	r1, r1, #12
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031fe:	430b      	orrs	r3, r1
 8003200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	6999      	ldr	r1, [r3, #24]
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	ea40 0301 	orr.w	r3, r0, r1
 800321e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <UART_SetConfig+0x2cc>)
 8003228:	429a      	cmp	r2, r3
 800322a:	d005      	beq.n	8003238 <UART_SetConfig+0xa0>
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b8d      	ldr	r3, [pc, #564]	; (8003468 <UART_SetConfig+0x2d0>)
 8003234:	429a      	cmp	r2, r3
 8003236:	d104      	bne.n	8003242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7ff f868 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 800323c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003240:	e003      	b.n	800324a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003242:	f7ff f84f 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8003246:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003254:	f040 810c 	bne.w	8003470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003262:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	1891      	adds	r1, r2, r2
 8003270:	65b9      	str	r1, [r7, #88]	; 0x58
 8003272:	415b      	adcs	r3, r3
 8003274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800327a:	4621      	mov	r1, r4
 800327c:	eb12 0801 	adds.w	r8, r2, r1
 8003280:	4629      	mov	r1, r5
 8003282:	eb43 0901 	adc.w	r9, r3, r1
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	eb18 0303 	adds.w	r3, r8, r3
 80032a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032a8:	462b      	mov	r3, r5
 80032aa:	eb49 0303 	adc.w	r3, r9, r3
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032c6:	460b      	mov	r3, r1
 80032c8:	18db      	adds	r3, r3, r3
 80032ca:	653b      	str	r3, [r7, #80]	; 0x50
 80032cc:	4613      	mov	r3, r2
 80032ce:	eb42 0303 	adc.w	r3, r2, r3
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
 80032d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032dc:	f7fd f9c0 	bl	8000660 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4b61      	ldr	r3, [pc, #388]	; (800346c <UART_SetConfig+0x2d4>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	011c      	lsls	r4, r3, #4
 80032ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003300:	4642      	mov	r2, r8
 8003302:	464b      	mov	r3, r9
 8003304:	1891      	adds	r1, r2, r2
 8003306:	64b9      	str	r1, [r7, #72]	; 0x48
 8003308:	415b      	adcs	r3, r3
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800330c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003310:	4641      	mov	r1, r8
 8003312:	eb12 0a01 	adds.w	sl, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb43 0b01 	adc.w	fp, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800332c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003330:	4692      	mov	sl, r2
 8003332:	469b      	mov	fp, r3
 8003334:	4643      	mov	r3, r8
 8003336:	eb1a 0303 	adds.w	r3, sl, r3
 800333a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800333e:	464b      	mov	r3, r9
 8003340:	eb4b 0303 	adc.w	r3, fp, r3
 8003344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003354:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800335c:	460b      	mov	r3, r1
 800335e:	18db      	adds	r3, r3, r3
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
 8003362:	4613      	mov	r3, r2
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
 800336a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800336e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003372:	f7fd f975 	bl	8000660 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4611      	mov	r1, r2
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <UART_SetConfig+0x2d4>)
 800337e:	fba3 2301 	umull	r2, r3, r3, r1
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2264      	movs	r2, #100	; 0x64
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	1acb      	subs	r3, r1, r3
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <UART_SetConfig+0x2d4>)
 8003394:	fba3 2302 	umull	r2, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a0:	441c      	add	r4, r3
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	1891      	adds	r1, r2, r2
 80033ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80033bc:	415b      	adcs	r3, r3
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033c4:	4641      	mov	r1, r8
 80033c6:	1851      	adds	r1, r2, r1
 80033c8:	6339      	str	r1, [r7, #48]	; 0x30
 80033ca:	4649      	mov	r1, r9
 80033cc:	414b      	adcs	r3, r1
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033dc:	4659      	mov	r1, fp
 80033de:	00cb      	lsls	r3, r1, #3
 80033e0:	4651      	mov	r1, sl
 80033e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e6:	4651      	mov	r1, sl
 80033e8:	00ca      	lsls	r2, r1, #3
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	4642      	mov	r2, r8
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f8:	464b      	mov	r3, r9
 80033fa:	460a      	mov	r2, r1
 80033fc:	eb42 0303 	adc.w	r3, r2, r3
 8003400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003410:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003418:	460b      	mov	r3, r1
 800341a:	18db      	adds	r3, r3, r3
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
 800341e:	4613      	mov	r3, r2
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800342e:	f7fd f917 	bl	8000660 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <UART_SetConfig+0x2d4>)
 8003438:	fba3 1302 	umull	r1, r3, r3, r2
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	2164      	movs	r1, #100	; 0x64
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3332      	adds	r3, #50	; 0x32
 800344a:	4a08      	ldr	r2, [pc, #32]	; (800346c <UART_SetConfig+0x2d4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	f003 0207 	and.w	r2, r3, #7
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4422      	add	r2, r4
 800345e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003460:	e106      	b.n	8003670 <UART_SetConfig+0x4d8>
 8003462:	bf00      	nop
 8003464:	40011000 	.word	0x40011000
 8003468:	40011400 	.word	0x40011400
 800346c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800347a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800347e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	1891      	adds	r1, r2, r2
 8003488:	6239      	str	r1, [r7, #32]
 800348a:	415b      	adcs	r3, r3
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003492:	4641      	mov	r1, r8
 8003494:	1854      	adds	r4, r2, r1
 8003496:	4649      	mov	r1, r9
 8003498:	eb43 0501 	adc.w	r5, r3, r1
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	00eb      	lsls	r3, r5, #3
 80034a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034aa:	00e2      	lsls	r2, r4, #3
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	18e3      	adds	r3, r4, r3
 80034b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034b8:	464b      	mov	r3, r9
 80034ba:	eb45 0303 	adc.w	r3, r5, r3
 80034be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034de:	4629      	mov	r1, r5
 80034e0:	008b      	lsls	r3, r1, #2
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e8:	4621      	mov	r1, r4
 80034ea:	008a      	lsls	r2, r1, #2
 80034ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034f0:	f7fd f8b6 	bl	8000660 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4b60      	ldr	r3, [pc, #384]	; (800367c <UART_SetConfig+0x4e4>)
 80034fa:	fba3 2302 	umull	r2, r3, r3, r2
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	011c      	lsls	r4, r3, #4
 8003502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800350c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003514:	4642      	mov	r2, r8
 8003516:	464b      	mov	r3, r9
 8003518:	1891      	adds	r1, r2, r2
 800351a:	61b9      	str	r1, [r7, #24]
 800351c:	415b      	adcs	r3, r3
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	4641      	mov	r1, r8
 8003526:	1851      	adds	r1, r2, r1
 8003528:	6139      	str	r1, [r7, #16]
 800352a:	4649      	mov	r1, r9
 800352c:	414b      	adcs	r3, r1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800353c:	4659      	mov	r1, fp
 800353e:	00cb      	lsls	r3, r1, #3
 8003540:	4651      	mov	r1, sl
 8003542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003546:	4651      	mov	r1, sl
 8003548:	00ca      	lsls	r2, r1, #3
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	4603      	mov	r3, r0
 8003550:	4642      	mov	r2, r8
 8003552:	189b      	adds	r3, r3, r2
 8003554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003558:	464b      	mov	r3, r9
 800355a:	460a      	mov	r2, r1
 800355c:	eb42 0303 	adc.w	r3, r2, r3
 8003560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	67bb      	str	r3, [r7, #120]	; 0x78
 800356e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800357c:	4649      	mov	r1, r9
 800357e:	008b      	lsls	r3, r1, #2
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003586:	4641      	mov	r1, r8
 8003588:	008a      	lsls	r2, r1, #2
 800358a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800358e:	f7fd f867 	bl	8000660 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4611      	mov	r1, r2
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <UART_SetConfig+0x4e4>)
 800359a:	fba3 2301 	umull	r2, r3, r3, r1
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2264      	movs	r2, #100	; 0x64
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	1acb      	subs	r3, r1, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	; 0x32
 80035ac:	4a33      	ldr	r2, [pc, #204]	; (800367c <UART_SetConfig+0x4e4>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	441c      	add	r4, r3
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	673b      	str	r3, [r7, #112]	; 0x70
 80035c2:	677a      	str	r2, [r7, #116]	; 0x74
 80035c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	415b      	adcs	r3, r3
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d8:	4641      	mov	r1, r8
 80035da:	1851      	adds	r1, r2, r1
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	4649      	mov	r1, r9
 80035e0:	414b      	adcs	r3, r1
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035f0:	4659      	mov	r1, fp
 80035f2:	00cb      	lsls	r3, r1, #3
 80035f4:	4651      	mov	r1, sl
 80035f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fa:	4651      	mov	r1, sl
 80035fc:	00ca      	lsls	r2, r1, #3
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	4603      	mov	r3, r0
 8003604:	4642      	mov	r2, r8
 8003606:	189b      	adds	r3, r3, r2
 8003608:	66bb      	str	r3, [r7, #104]	; 0x68
 800360a:	464b      	mov	r3, r9
 800360c:	460a      	mov	r2, r1
 800360e:	eb42 0303 	adc.w	r3, r2, r3
 8003612:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	663b      	str	r3, [r7, #96]	; 0x60
 800361e:	667a      	str	r2, [r7, #100]	; 0x64
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800362c:	4649      	mov	r1, r9
 800362e:	008b      	lsls	r3, r1, #2
 8003630:	4641      	mov	r1, r8
 8003632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003636:	4641      	mov	r1, r8
 8003638:	008a      	lsls	r2, r1, #2
 800363a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800363e:	f7fd f80f 	bl	8000660 <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <UART_SetConfig+0x4e4>)
 8003648:	fba3 1302 	umull	r1, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2164      	movs	r1, #100	; 0x64
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	3332      	adds	r3, #50	; 0x32
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <UART_SetConfig+0x4e4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4422      	add	r2, r4
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003676:	46bd      	mov	sp, r7
 8003678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367c:	51eb851f 	.word	0x51eb851f

08003680 <memset>:
 8003680:	4402      	add	r2, r0
 8003682:	4603      	mov	r3, r0
 8003684:	4293      	cmp	r3, r2
 8003686:	d100      	bne.n	800368a <memset+0xa>
 8003688:	4770      	bx	lr
 800368a:	f803 1b01 	strb.w	r1, [r3], #1
 800368e:	e7f9      	b.n	8003684 <memset+0x4>

08003690 <__libc_init_array>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4d0d      	ldr	r5, [pc, #52]	; (80036c8 <__libc_init_array+0x38>)
 8003694:	4c0d      	ldr	r4, [pc, #52]	; (80036cc <__libc_init_array+0x3c>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	2600      	movs	r6, #0
 800369c:	42a6      	cmp	r6, r4
 800369e:	d109      	bne.n	80036b4 <__libc_init_array+0x24>
 80036a0:	4d0b      	ldr	r5, [pc, #44]	; (80036d0 <__libc_init_array+0x40>)
 80036a2:	4c0c      	ldr	r4, [pc, #48]	; (80036d4 <__libc_init_array+0x44>)
 80036a4:	f000 f818 	bl	80036d8 <_init>
 80036a8:	1b64      	subs	r4, r4, r5
 80036aa:	10a4      	asrs	r4, r4, #2
 80036ac:	2600      	movs	r6, #0
 80036ae:	42a6      	cmp	r6, r4
 80036b0:	d105      	bne.n	80036be <__libc_init_array+0x2e>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b8:	4798      	blx	r3
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7ee      	b.n	800369c <__libc_init_array+0xc>
 80036be:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c2:	4798      	blx	r3
 80036c4:	3601      	adds	r6, #1
 80036c6:	e7f2      	b.n	80036ae <__libc_init_array+0x1e>
 80036c8:	08003710 	.word	0x08003710
 80036cc:	08003710 	.word	0x08003710
 80036d0:	08003710 	.word	0x08003710
 80036d4:	08003714 	.word	0x08003714

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
