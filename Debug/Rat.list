
Rat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a90  08003a90  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a98  08003a98  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000024  08003ac4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003ac4  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdab  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed2  00000000  00000000  0002ce42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bf  00000000  00000000  0002f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015fe5  00000000  00000000  0003035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecdc  00000000  00000000  00046344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a2bd  00000000  00000000  00055020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034e0  00000000  00000000  000df2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e27c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a60 	.word	0x08003a60

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08003a60 	.word	0x08003a60

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000670:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000674:	f000 b970 	b.w	8000958 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9e08      	ldr	r6, [sp, #32]
 8000696:	460d      	mov	r5, r1
 8000698:	4604      	mov	r4, r0
 800069a:	460f      	mov	r7, r1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d14a      	bne.n	8000736 <__udivmoddi4+0xa6>
 80006a0:	428a      	cmp	r2, r1
 80006a2:	4694      	mov	ip, r2
 80006a4:	d965      	bls.n	8000772 <__udivmoddi4+0xe2>
 80006a6:	fab2 f382 	clz	r3, r2
 80006aa:	b143      	cbz	r3, 80006be <__udivmoddi4+0x2e>
 80006ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80006b0:	f1c3 0220 	rsb	r2, r3, #32
 80006b4:	409f      	lsls	r7, r3
 80006b6:	fa20 f202 	lsr.w	r2, r0, r2
 80006ba:	4317      	orrs	r7, r2
 80006bc:	409c      	lsls	r4, r3
 80006be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006c2:	fa1f f58c 	uxth.w	r5, ip
 80006c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80006ca:	0c22      	lsrs	r2, r4, #16
 80006cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80006d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006d4:	fb01 f005 	mul.w	r0, r1, r5
 80006d8:	4290      	cmp	r0, r2
 80006da:	d90a      	bls.n	80006f2 <__udivmoddi4+0x62>
 80006dc:	eb1c 0202 	adds.w	r2, ip, r2
 80006e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80006e4:	f080 811c 	bcs.w	8000920 <__udivmoddi4+0x290>
 80006e8:	4290      	cmp	r0, r2
 80006ea:	f240 8119 	bls.w	8000920 <__udivmoddi4+0x290>
 80006ee:	3902      	subs	r1, #2
 80006f0:	4462      	add	r2, ip
 80006f2:	1a12      	subs	r2, r2, r0
 80006f4:	b2a4      	uxth	r4, r4
 80006f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80006fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80006fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000702:	fb00 f505 	mul.w	r5, r0, r5
 8000706:	42a5      	cmp	r5, r4
 8000708:	d90a      	bls.n	8000720 <__udivmoddi4+0x90>
 800070a:	eb1c 0404 	adds.w	r4, ip, r4
 800070e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000712:	f080 8107 	bcs.w	8000924 <__udivmoddi4+0x294>
 8000716:	42a5      	cmp	r5, r4
 8000718:	f240 8104 	bls.w	8000924 <__udivmoddi4+0x294>
 800071c:	4464      	add	r4, ip
 800071e:	3802      	subs	r0, #2
 8000720:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000724:	1b64      	subs	r4, r4, r5
 8000726:	2100      	movs	r1, #0
 8000728:	b11e      	cbz	r6, 8000732 <__udivmoddi4+0xa2>
 800072a:	40dc      	lsrs	r4, r3
 800072c:	2300      	movs	r3, #0
 800072e:	e9c6 4300 	strd	r4, r3, [r6]
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	428b      	cmp	r3, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0xbc>
 800073a:	2e00      	cmp	r6, #0
 800073c:	f000 80ed 	beq.w	800091a <__udivmoddi4+0x28a>
 8000740:	2100      	movs	r1, #0
 8000742:	e9c6 0500 	strd	r0, r5, [r6]
 8000746:	4608      	mov	r0, r1
 8000748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074c:	fab3 f183 	clz	r1, r3
 8000750:	2900      	cmp	r1, #0
 8000752:	d149      	bne.n	80007e8 <__udivmoddi4+0x158>
 8000754:	42ab      	cmp	r3, r5
 8000756:	d302      	bcc.n	800075e <__udivmoddi4+0xce>
 8000758:	4282      	cmp	r2, r0
 800075a:	f200 80f8 	bhi.w	800094e <__udivmoddi4+0x2be>
 800075e:	1a84      	subs	r4, r0, r2
 8000760:	eb65 0203 	sbc.w	r2, r5, r3
 8000764:	2001      	movs	r0, #1
 8000766:	4617      	mov	r7, r2
 8000768:	2e00      	cmp	r6, #0
 800076a:	d0e2      	beq.n	8000732 <__udivmoddi4+0xa2>
 800076c:	e9c6 4700 	strd	r4, r7, [r6]
 8000770:	e7df      	b.n	8000732 <__udivmoddi4+0xa2>
 8000772:	b902      	cbnz	r2, 8000776 <__udivmoddi4+0xe6>
 8000774:	deff      	udf	#255	; 0xff
 8000776:	fab2 f382 	clz	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	f040 8090 	bne.w	80008a0 <__udivmoddi4+0x210>
 8000780:	1a8a      	subs	r2, r1, r2
 8000782:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000786:	fa1f fe8c 	uxth.w	lr, ip
 800078a:	2101      	movs	r1, #1
 800078c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000790:	fb07 2015 	mls	r0, r7, r5, r2
 8000794:	0c22      	lsrs	r2, r4, #16
 8000796:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800079a:	fb0e f005 	mul.w	r0, lr, r5
 800079e:	4290      	cmp	r0, r2
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x124>
 80007a2:	eb1c 0202 	adds.w	r2, ip, r2
 80007a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x122>
 80007ac:	4290      	cmp	r0, r2
 80007ae:	f200 80cb 	bhi.w	8000948 <__udivmoddi4+0x2b8>
 80007b2:	4645      	mov	r5, r8
 80007b4:	1a12      	subs	r2, r2, r0
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80007bc:	fb07 2210 	mls	r2, r7, r0, r2
 80007c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007c4:	fb0e fe00 	mul.w	lr, lr, r0
 80007c8:	45a6      	cmp	lr, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x14e>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x14c>
 80007d6:	45a6      	cmp	lr, r4
 80007d8:	f200 80bb 	bhi.w	8000952 <__udivmoddi4+0x2c2>
 80007dc:	4610      	mov	r0, r2
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007e6:	e79f      	b.n	8000728 <__udivmoddi4+0x98>
 80007e8:	f1c1 0720 	rsb	r7, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80007f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f6:	fa05 f401 	lsl.w	r4, r5, r1
 80007fa:	fa20 f307 	lsr.w	r3, r0, r7
 80007fe:	40fd      	lsrs	r5, r7
 8000800:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000804:	4323      	orrs	r3, r4
 8000806:	fbb5 f8f9 	udiv	r8, r5, r9
 800080a:	fa1f fe8c 	uxth.w	lr, ip
 800080e:	fb09 5518 	mls	r5, r9, r8, r5
 8000812:	0c1c      	lsrs	r4, r3, #16
 8000814:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000818:	fb08 f50e 	mul.w	r5, r8, lr
 800081c:	42a5      	cmp	r5, r4
 800081e:	fa02 f201 	lsl.w	r2, r2, r1
 8000822:	fa00 f001 	lsl.w	r0, r0, r1
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b0>
 8000828:	eb1c 0404 	adds.w	r4, ip, r4
 800082c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000830:	f080 8088 	bcs.w	8000944 <__udivmoddi4+0x2b4>
 8000834:	42a5      	cmp	r5, r4
 8000836:	f240 8085 	bls.w	8000944 <__udivmoddi4+0x2b4>
 800083a:	f1a8 0802 	sub.w	r8, r8, #2
 800083e:	4464      	add	r4, ip
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	b29d      	uxth	r5, r3
 8000844:	fbb4 f3f9 	udiv	r3, r4, r9
 8000848:	fb09 4413 	mls	r4, r9, r3, r4
 800084c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000850:	fb03 fe0e 	mul.w	lr, r3, lr
 8000854:	45a6      	cmp	lr, r4
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1da>
 8000858:	eb1c 0404 	adds.w	r4, ip, r4
 800085c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000860:	d26c      	bcs.n	800093c <__udivmoddi4+0x2ac>
 8000862:	45a6      	cmp	lr, r4
 8000864:	d96a      	bls.n	800093c <__udivmoddi4+0x2ac>
 8000866:	3b02      	subs	r3, #2
 8000868:	4464      	add	r4, ip
 800086a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800086e:	fba3 9502 	umull	r9, r5, r3, r2
 8000872:	eba4 040e 	sub.w	r4, r4, lr
 8000876:	42ac      	cmp	r4, r5
 8000878:	46c8      	mov	r8, r9
 800087a:	46ae      	mov	lr, r5
 800087c:	d356      	bcc.n	800092c <__udivmoddi4+0x29c>
 800087e:	d053      	beq.n	8000928 <__udivmoddi4+0x298>
 8000880:	b156      	cbz	r6, 8000898 <__udivmoddi4+0x208>
 8000882:	ebb0 0208 	subs.w	r2, r0, r8
 8000886:	eb64 040e 	sbc.w	r4, r4, lr
 800088a:	fa04 f707 	lsl.w	r7, r4, r7
 800088e:	40ca      	lsrs	r2, r1
 8000890:	40cc      	lsrs	r4, r1
 8000892:	4317      	orrs	r7, r2
 8000894:	e9c6 7400 	strd	r7, r4, [r6]
 8000898:	4618      	mov	r0, r3
 800089a:	2100      	movs	r1, #0
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	f1c3 0120 	rsb	r1, r3, #32
 80008a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008a8:	fa20 f201 	lsr.w	r2, r0, r1
 80008ac:	fa25 f101 	lsr.w	r1, r5, r1
 80008b0:	409d      	lsls	r5, r3
 80008b2:	432a      	orrs	r2, r5
 80008b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b8:	fa1f fe8c 	uxth.w	lr, ip
 80008bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c0:	fb07 1510 	mls	r5, r7, r0, r1
 80008c4:	0c11      	lsrs	r1, r2, #16
 80008c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008ca:	fb00 f50e 	mul.w	r5, r0, lr
 80008ce:	428d      	cmp	r5, r1
 80008d0:	fa04 f403 	lsl.w	r4, r4, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x258>
 80008d6:	eb1c 0101 	adds.w	r1, ip, r1
 80008da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008de:	d22f      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 80008e0:	428d      	cmp	r5, r1
 80008e2:	d92d      	bls.n	8000940 <__udivmoddi4+0x2b0>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	1b49      	subs	r1, r1, r5
 80008ea:	b292      	uxth	r2, r2
 80008ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80008f0:	fb07 1115 	mls	r1, r7, r5, r1
 80008f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008f8:	fb05 f10e 	mul.w	r1, r5, lr
 80008fc:	4291      	cmp	r1, r2
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x282>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000908:	d216      	bcs.n	8000938 <__udivmoddi4+0x2a8>
 800090a:	4291      	cmp	r1, r2
 800090c:	d914      	bls.n	8000938 <__udivmoddi4+0x2a8>
 800090e:	3d02      	subs	r5, #2
 8000910:	4462      	add	r2, ip
 8000912:	1a52      	subs	r2, r2, r1
 8000914:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000918:	e738      	b.n	800078c <__udivmoddi4+0xfc>
 800091a:	4631      	mov	r1, r6
 800091c:	4630      	mov	r0, r6
 800091e:	e708      	b.n	8000732 <__udivmoddi4+0xa2>
 8000920:	4639      	mov	r1, r7
 8000922:	e6e6      	b.n	80006f2 <__udivmoddi4+0x62>
 8000924:	4610      	mov	r0, r2
 8000926:	e6fb      	b.n	8000720 <__udivmoddi4+0x90>
 8000928:	4548      	cmp	r0, r9
 800092a:	d2a9      	bcs.n	8000880 <__udivmoddi4+0x1f0>
 800092c:	ebb9 0802 	subs.w	r8, r9, r2
 8000930:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000934:	3b01      	subs	r3, #1
 8000936:	e7a3      	b.n	8000880 <__udivmoddi4+0x1f0>
 8000938:	4645      	mov	r5, r8
 800093a:	e7ea      	b.n	8000912 <__udivmoddi4+0x282>
 800093c:	462b      	mov	r3, r5
 800093e:	e794      	b.n	800086a <__udivmoddi4+0x1da>
 8000940:	4640      	mov	r0, r8
 8000942:	e7d1      	b.n	80008e8 <__udivmoddi4+0x258>
 8000944:	46d0      	mov	r8, sl
 8000946:	e77b      	b.n	8000840 <__udivmoddi4+0x1b0>
 8000948:	3d02      	subs	r5, #2
 800094a:	4462      	add	r2, ip
 800094c:	e732      	b.n	80007b4 <__udivmoddi4+0x124>
 800094e:	4608      	mov	r0, r1
 8000950:	e70a      	b.n	8000768 <__udivmoddi4+0xd8>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	e742      	b.n	80007de <__udivmoddi4+0x14e>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <turn>:
/*
 * We recommend you implement this function so that turn(1) turns your rat 90 degrees in your positive rotation
 * direction and turn(-1) turns the other way.
 */
int a = 0;
void turn(int8_t n) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]

	setPIDGoalA(n*500);
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	b29b      	uxth	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	0152      	lsls	r2, r2, #5
 8000970:	1ad2      	subs	r2, r2, r3
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	b29b      	uxth	r3, r3
 800097a:	b21b      	sxth	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fca7 	bl	80012d0 <setPIDGoalA>
	setPIDGoalD(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f000 fc92 	bl	80012ac <setPIDGoalD>

	while (PIDdone() == 0) {
 8000988:	bf00      	nop
 800098a:	f000 fcb3 	bl	80012f4 <PIDdone>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0fa      	beq.n	800098a <turn+0x2e>

	}

	a = 100;
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <turn+0x4c>)
 8000996:	2264      	movs	r2, #100	; 0x64
 8000998:	601a      	str	r2, [r3, #0]
	resetPID();
 800099a:	f000 fb89 	bl	80010b0 <resetPID>
	 *
	 * HINT: Use a while loop to wait until the turn is complete
	 *
	 * You should also call resetPID before exiting this function so your rat is ready for the next instruction.
	 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000040 	.word	0x20000040

080009ac <getRightEncoderCounts>:
#include "encoders.h"

/*
 * Implement this function so it returns the right encoder value
 */
int16_t getRightEncoderCounts() {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	return -TIM2->CNT;
 80009b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	425b      	negs	r3, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b21b      	sxth	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <getLeftEncoderCounts>:

/*
 * Implement this function so it returns the left encoder value
 */
int16_t getLeftEncoderCounts() {
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return -TIM1->CNT;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <getLeftEncoderCounts+0x1c>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	425b      	negs	r3, r3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b21b      	sxth	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40010000 	.word	0x40010000

080009e8 <resetEncoders>:

/*
 * This function has already been implemented for you. Enjoy! :)
 */
void resetEncoders() {
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <resetEncoders+0x1c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = (int16_t) 0;
 80009f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	40010000 	.word	0x40010000

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f000 fe84 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f83c 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f000 f9f4 	bl	8000e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a18:	f000 f9c8 	bl	8000dac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a1c:	f000 f8a0 	bl	8000b60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a20:	f000 f8f6 	bl	8000c10 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000a24:	f000 f948 	bl	8000cb8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a28:	213c      	movs	r1, #60	; 0x3c
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <main+0x70>)
 8000a2c:	f001 ffec 	bl	8002a08 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000a30:	213c      	movs	r1, #60	; 0x3c
 8000a32:	4812      	ldr	r0, [pc, #72]	; (8000a7c <main+0x74>)
 8000a34:	f001 ffe8 	bl	8002a08 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <main+0x78>)
 8000a3c:	f001 fe8e 	bl	800275c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <main+0x78>)
 8000a44:	f001 fe8a 	bl	800275c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a48:	2108      	movs	r1, #8
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <main+0x78>)
 8000a4c:	f001 fe86 	bl	800275c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a50:	210c      	movs	r1, #12
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0x78>)
 8000a54:	f001 fe82 	bl	800275c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	turn(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff ff7f 	bl	800095c <turn>



	while (1) {
		left_counts = getLeftEncoderCounts();
 8000a5e:	f7ff ffb3 	bl	80009c8 <getLeftEncoderCounts>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <main+0x7c>)
 8000a68:	801a      	strh	r2, [r3, #0]
		right_counts = getRightEncoderCounts();
 8000a6a:	f7ff ff9f 	bl	80009ac <getRightEncoderCounts>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <main+0x80>)
 8000a74:	801a      	strh	r2, [r3, #0]
		left_counts = getLeftEncoderCounts();
 8000a76:	e7f2      	b.n	8000a5e <main+0x56>
 8000a78:	20000044 	.word	0x20000044
 8000a7c:	2000008c 	.word	0x2000008c
 8000a80:	200000d4 	.word	0x200000d4
 8000a84:	20000160 	.word	0x20000160
 8000a88:	20000162 	.word	0x20000162

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 ffb4 	bl	8003a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2310      	movs	r3, #16
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000afc:	2310      	movs	r3, #16
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b06:	2304      	movs	r3, #4
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f93a 	bl	8001d8c <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b1e:	f000 f9ff 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fb9c 	bl	800227c <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b4a:	f000 f9e9 	bl	8000f20 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2224      	movs	r2, #36	; 0x24
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 ff4a 	bl	8003a08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <MX_TIM1_Init+0xac>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000bd4:	f001 fe72 	bl	80028bc <HAL_TIM_Encoder_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bde:	f000 f99f 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_TIM1_Init+0xa8>)
 8000bf0:	f002 fbc6 	bl	8003380 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000bfa:	f000 f991 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	; 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000044 	.word	0x20000044
 8000c0c:	40010000 	.word	0x40010000

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2224      	movs	r2, #36	; 0x24
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fef2 	bl	8003a08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c54:	2303      	movs	r3, #3
 8000c56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c80:	f001 fe1c 	bl	80028bc <HAL_TIM_Encoder_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c8a:	f000 f949 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_TIM2_Init+0xa4>)
 8000c9c:	f002 fb70 	bl	8003380 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ca6:	f000 f93b 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3730      	adds	r7, #48	; 0x30
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000008c 	.word	0x2000008c

08000cb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000cdc:	4a32      	ldr	r2, [pc, #200]	; (8000da8 <MX_TIM4_Init+0xf0>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000cee:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000cf2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d00:	4828      	ldr	r0, [pc, #160]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000d02:	f001 fcdb 	bl	80026bc <HAL_TIM_PWM_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d0c:	f000 f908 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000d20:	f002 fb2e 	bl	8003380 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000d2a:	f000 f8f9 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2e:	2360      	movs	r3, #96	; 0x60
 8000d30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	4817      	ldr	r0, [pc, #92]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000d46:	f001 fff5 	bl	8002d34 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d50:	f000 f8e6 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2204      	movs	r2, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4812      	ldr	r0, [pc, #72]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000d5c:	f001 ffea 	bl	8002d34 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d66:	f000 f8db 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000d72:	f001 ffdf 	bl	8002d34 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000d7c:	f000 f8d0 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	220c      	movs	r2, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000d88:	f001 ffd4 	bl	8002d34 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000d92:	f000 f8c5 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM4_Init+0xec>)
 8000d98:	f000 fb86 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000d4 	.word	0x200000d4
 8000da8:	40000800 	.word	0x40000800

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART2_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f002 fb4e 	bl	8003484 <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f000 f897 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000011c 	.word	0x2000011c
 8000dfc:	40004400 	.word	0x40004400

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a30      	ldr	r2, [pc, #192]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_GPIO_Init+0xe0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_GPIO_Init+0xe4>)
 8000e8c:	f000 ff4c 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <MX_GPIO_Init+0xe8>)
 8000ea8:	f000 fdba 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eac:	2320      	movs	r3, #32
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <MX_GPIO_Init+0xe4>)
 8000ec4:	f000 fdac 	bl	8001a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2028      	movs	r0, #40	; 0x28
 8000ece:	f000 fd70 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed2:	2028      	movs	r0, #40	; 0x28
 8000ed4:	f000 fd89 	bl	80019ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020800 	.word	0x40020800

08000eec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == Button_Pin) {
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000efc:	d105      	bne.n	8000f0a <HAL_GPIO_EXTI_Callback+0x1e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2120      	movs	r1, #32
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x30>)
 8000f04:	f000 ff10 	bl	8001d28 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x30>)
 8000f10:	f000 ff0a 	bl	8001d28 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40020000 	.word	0x40020000

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
 8000f2a:	0000      	movs	r0, r0
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX) {
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fab0 	bl	80004a0 <__aeabi_f2d>
 8000f40:	a313      	add	r3, pc, #76	; (adr r3, 8000f90 <limitPWM+0x60>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fb81 	bl	800064c <__aeabi_dcmpgt>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <limitPWM+0x24>
		return  PWM_MAX;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <limitPWM+0x58>)
 8000f52:	e00d      	b.n	8000f70 <limitPWM+0x40>
	}
	else if (pwm < -PWM_MAX) {
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff faa3 	bl	80004a0 <__aeabi_f2d>
 8000f5a:	a309      	add	r3, pc, #36	; (adr r3, 8000f80 <limitPWM+0x50>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fb56 	bl	8000610 <__aeabi_dcmplt>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <limitPWM+0x3e>
		return -PWM_MAX;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <limitPWM+0x5c>)
 8000f6c:	e000      	b.n	8000f70 <limitPWM+0x40>
	}
	else {
		return pwm;
 8000f6e:	687b      	ldr	r3, [r7, #4]
	}
}
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	9999999a 	.word	0x9999999a
 8000f84:	bfe99999 	.word	0xbfe99999
 8000f88:	3f4ccccd 	.word	0x3f4ccccd
 8000f8c:	bf4ccccd 	.word	0xbf4ccccd
 8000f90:	9999999a 	.word	0x9999999a
 8000f94:	3fe99999 	.word	0x3fe99999

08000f98 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm <= 0) {
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d813      	bhi.n	8000fd8 <setMotorLPWM+0x40>
		TIM4->CCR4 = 0;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <setMotorLPWM+0x70>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
		TIM4->CCR3 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
 8000fb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fba:	f7ff ffb9 	bl	8000f30 <limitPWM>
 8000fbe:	eef0 7a40 	vmov.f32	s15, s0
 8000fc2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800100c <setMotorLPWM+0x74>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <setMotorLPWM+0x70>)
 8000fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd0:	ee17 2a90 	vmov	r2, s15
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c

	} else {
		TIM4->CCR3 = 0;
		TIM4->CCR4 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8000fd6:	e012      	b.n	8000ffe <setMotorLPWM+0x66>
		TIM4->CCR3 = 0;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <setMotorLPWM+0x70>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000fde:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fe2:	f7ff ffa5 	bl	8000f30 <limitPWM>
 8000fe6:	eef0 7a40 	vmov.f32	s15, s0
 8000fea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001010 <setMotorLPWM+0x78>
 8000fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <setMotorLPWM+0x70>)
 8000ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff8:	ee17 2a90 	vmov	r2, s15
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40000800 	.word	0x40000800
 800100c:	c547f000 	.word	0xc547f000
 8001010:	4547f000 	.word	0x4547f000

08001014 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 800101e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	db13      	blt.n	8001054 <setMotorRPWM+0x40>
		TIM4->CCR1 = 0;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <setMotorRPWM+0x78>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001032:	ed97 0a01 	vldr	s0, [r7, #4]
 8001036:	f7ff ff7b 	bl	8000f30 <limitPWM>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001090 <setMotorRPWM+0x7c>
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <setMotorRPWM+0x78>)
 8001048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104c:	ee17 2a90 	vmov	r2, s15
 8001050:	639a      	str	r2, [r3, #56]	; 0x38

	} else {
		TIM4->CCR2 = 0;
		TIM4->CCR1 = (uint32_t) (limitPWM(-pwm) * MAX_TIMER_COUNTS);
	}
}
 8001052:	e016      	b.n	8001082 <setMotorRPWM+0x6e>
		TIM4->CCR2 = 0;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <setMotorRPWM+0x78>)
 8001056:	2200      	movs	r2, #0
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1 = (uint32_t) (limitPWM(-pwm) * MAX_TIMER_COUNTS);
 800105a:	edd7 7a01 	vldr	s15, [r7, #4]
 800105e:	eef1 7a67 	vneg.f32	s15, s15
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	f7ff ff63 	bl	8000f30 <limitPWM>
 800106a:	eef0 7a40 	vmov.f32	s15, s0
 800106e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001090 <setMotorRPWM+0x7c>
 8001072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <setMotorRPWM+0x78>)
 8001078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107c:	ee17 2a90 	vmov	r2, s15
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40000800 	.word	0x40000800
 8001090:	4547f000 	.word	0x4547f000

08001094 <resetMotors>:

/*
 * Using the two previous setMotorPWM functions, implement resetMotors to set the PWM for both wheels to zero, effectively stopping them.
 */
void resetMotors() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	setMotorRPWM(0);
 8001098:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80010ac <resetMotors+0x18>
 800109c:	f7ff ffba 	bl	8001014 <setMotorRPWM>
	setMotorLPWM(0);
 80010a0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80010ac <resetMotors+0x18>
 80010a4:	f7ff ff78 	bl	8000f98 <setMotorLPWM>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	00000000 	.word	0x00000000

080010b0 <resetPID>:

int done = 0;

int test = 0;

void resetPID() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	 * difference in encoder counts after it turns. If you follow that by telling your rat to drive straight without first
	 * resetting the encoder counts, your rat is going to see a huge angle error and be very unhappy).
	 *
	 * You should additionally set your distance and error goal values (and your oldDistanceError and oldAngleError) to zero.
	 */
	done = 0;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <resetPID+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]


	angleError = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <resetPID+0x44>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <resetPID+0x48>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
	distanceError = 0;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <resetPID+0x4c>)
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <resetPID+0x50>)
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

	goalDistance = 0;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <resetPID+0x54>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
	goalAngle = 0;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <resetPID+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]




	resetEncoders();
 80010e2:	f7ff fc81 	bl	80009e8 <resetEncoders>
	resetMotors();
 80010e6:	f7ff ffd5 	bl	8001094 <resetMotors>



}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000180 	.word	0x20000180
 80010f4:	20000164 	.word	0x20000164
 80010f8:	20000168 	.word	0x20000168
 80010fc:	2000016c 	.word	0x2000016c
 8001100:	20000170 	.word	0x20000170
 8001104:	20000178 	.word	0x20000178
 8001108:	2000017c 	.word	0x2000017c

0800110c <updatePID>:

void updatePID() {
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

	angleError = goalAngle - (getRightEncoderCounts() - getLeftEncoderCounts());
 8001112:	4b58      	ldr	r3, [pc, #352]	; (8001274 <updatePID+0x168>)
 8001114:	681c      	ldr	r4, [r3, #0]
 8001116:	f7ff fc49 	bl	80009ac <getRightEncoderCounts>
 800111a:	4603      	mov	r3, r0
 800111c:	461d      	mov	r5, r3
 800111e:	f7ff fc53 	bl	80009c8 <getLeftEncoderCounts>
 8001122:	4603      	mov	r3, r0
 8001124:	1aeb      	subs	r3, r5, r3
 8001126:	1ae3      	subs	r3, r4, r3
 8001128:	4a53      	ldr	r2, [pc, #332]	; (8001278 <updatePID+0x16c>)
 800112a:	6013      	str	r3, [r2, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <updatePID+0x16c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <updatePID+0x170>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001142:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <updatePID+0x16c>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <updatePID+0x174>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <updatePID+0x178>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <updatePID+0x17c>)
 8001164:	edc3 7a00 	vstr	s15, [r3]
	oldAngleError = angleError;
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <updatePID+0x16c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a44      	ldr	r2, [pc, #272]	; (8001280 <updatePID+0x174>)
 800116e:	6013      	str	r3, [r2, #0]

	distanceError = goalDistance
			- ((getRightEncoderCounts() + getLeftEncoderCounts()) / 2);
 8001170:	f7ff fc1c 	bl	80009ac <getRightEncoderCounts>
 8001174:	4603      	mov	r3, r0
 8001176:	461c      	mov	r4, r3
 8001178:	f7ff fc26 	bl	80009c8 <getLeftEncoderCounts>
 800117c:	4603      	mov	r3, r0
 800117e:	4423      	add	r3, r4
 8001180:	0fda      	lsrs	r2, r3, #31
 8001182:	4413      	add	r3, r2
 8001184:	105b      	asrs	r3, r3, #1
 8001186:	425b      	negs	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <updatePID+0x180>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
	distanceError = goalDistance
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <updatePID+0x184>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
	float distanceCorrection = kPx * distanceError
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <updatePID+0x188>)
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <updatePID+0x184>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ kDx * (distanceError - oldDistanceError);
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <updatePID+0x184>)
 80011b0:	edd3 6a00 	vldr	s13, [r3]
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <updatePID+0x18c>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <updatePID+0x190>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float distanceCorrection = kPx * distanceError
 80011c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011cc:	edc7 7a03 	vstr	s15, [r7, #12]
	oldDistanceError = distanceError;
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <updatePID+0x184>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a30      	ldr	r2, [pc, #192]	; (8001298 <updatePID+0x18c>)
 80011d6:	6013      	str	r3, [r2, #0]


	float leftCorrection = distanceCorrection - angleCorrection;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <updatePID+0x17c>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e6:	edc7 7a02 	vstr	s15, [r7, #8]
	float rightCorrection = distanceCorrection + angleCorrection;
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <updatePID+0x17c>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f8:	edc7 7a01 	vstr	s15, [r7, #4]
	 } else {
	 setMotorRPWM(rightCorrection);
	 }
	 */

	setMotorLPWM(leftCorrection);
 80011fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001200:	f7ff feca 	bl	8000f98 <setMotorLPWM>
	setMotorRPWM(rightCorrection);
 8001204:	ed97 0a01 	vldr	s0, [r7, #4]
 8001208:	f7ff ff04 	bl	8001014 <setMotorRPWM>
	 * For assignment 3.2: implement this function so it calculates distanceError as the difference between your goal distance and the average of
	 * your left and right encoder counts. Calculate angleError as the difference between your goal angle and the difference between your left and
	 * right encoder counts. Refer to pseudocode example document on the google drive for some pointers.
	 */

	if (-bound_w < angleError && angleError < bound_w
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <updatePID+0x194>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	425a      	negs	r2, r3
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <updatePID+0x16c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	da27      	bge.n	800126a <updatePID+0x15e>
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <updatePID+0x16c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <updatePID+0x194>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	da21      	bge.n	800126a <updatePID+0x15e>
			&& -bound_x < distanceError && distanceError < bound_x) {
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <updatePID+0x198>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	425b      	negs	r3, r3
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <updatePID+0x184>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d400      	bmi.n	8001246 <updatePID+0x13a>
		done = 1;
	}
}
 8001244:	e011      	b.n	800126a <updatePID+0x15e>
			&& -bound_x < distanceError && distanceError < bound_x) {
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <updatePID+0x198>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <updatePID+0x184>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	dc00      	bgt.n	8001264 <updatePID+0x158>
}
 8001262:	e002      	b.n	800126a <updatePID+0x15e>
		done = 1;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <updatePID+0x19c>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bdb0      	pop	{r4, r5, r7, pc}
 8001272:	bf00      	nop
 8001274:	2000017c 	.word	0x2000017c
 8001278:	20000164 	.word	0x20000164
 800127c:	20000000 	.word	0x20000000
 8001280:	20000168 	.word	0x20000168
 8001284:	20000004 	.word	0x20000004
 8001288:	20000174 	.word	0x20000174
 800128c:	20000178 	.word	0x20000178
 8001290:	2000016c 	.word	0x2000016c
 8001294:	20000008 	.word	0x20000008
 8001298:	20000170 	.word	0x20000170
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	20000014 	.word	0x20000014
 80012a4:	20000010 	.word	0x20000010
 80012a8:	20000180 	.word	0x20000180

080012ac <setPIDGoalD>:

void setPIDGoalD(int16_t distance) {
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	/*
	 * For assignment 3.1: this function does not need to do anything.
	 * For assignment 3.2: this function should set a variable that stores the goal distance.
	 */
	goalDistance = distance;
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <setPIDGoalD+0x20>)
 80012bc:	6013      	str	r3, [r2, #0]

}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000178 	.word	0x20000178

080012d0 <setPIDGoalA>:

void setPIDGoalA(int16_t angle) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	/*
	 * For assignment 3.1: this function does not need to do anything
	 * For assignment 3.2: This function should set a variable that stores the goal angle.
	 */
	goalAngle = angle;
 80012da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <setPIDGoalA+0x20>)
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000017c 	.word	0x2000017c

080012f4 <PIDdone>:

int8_t PIDdone(void) { // There is no bool type in C. True/False values are represented as 1 or 0.
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	 * For assignment 3.1: this function does not need to do anything (your rat should just drive straight indefinitely)
	 * For assignment 3.2:This function should return true if the rat has achieved the set goal. One way to do this by having updatePID() set some variable when
	 * the error is zero (realistically, have it set the variable when the error is close to zero, not just exactly zero). You will have better results if you make
	 * PIDdone() return true only if the error has been sufficiently close to zero for a certain number, say, 50, of SysTick calls in a row.
	 */
	if (done == 1) {
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <PIDdone+0x1c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <PIDdone+0x10>
		return 1;
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <PIDdone+0x12>
	}
	return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000180 	.word	0x20000180

08001314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_MspInit+0x4c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_MspInit+0x4c>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001352:	2007      	movs	r0, #7
 8001354:	f000 fb22 	bl	800199c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a32      	ldr	r2, [pc, #200]	; (800144c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d12d      	bne.n	80013e2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a30      	ldr	r2, [pc, #192]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a29      	ldr	r2, [pc, #164]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderC1_Pin|LeftEncoderC2_Pin;
 80013be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	481e      	ldr	r0, [pc, #120]	; (8001454 <HAL_TIM_Encoder_MspInit+0xf0>)
 80013dc:	f000 fb20 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013e0:	e030      	b.n	8001444 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ea:	d12b      	bne.n	8001444 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_TIM_Encoder_MspInit+0xec>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderC1_Pin|RightEncoderC2_Pin;
 8001424:	2303      	movs	r3, #3
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001434:	2301      	movs	r3, #1
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001440:	f000 faee 	bl	8001a20 <HAL_GPIO_Init>
}
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	; 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_TIM_PWM_MspInit+0x48>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d115      	bne.n	8001496 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_TIM_PWM_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	201e      	movs	r0, #30
 800148c:	f000 fa91 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001490:	201e      	movs	r0, #30
 8001492:	f000 faaa 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000800 	.word	0x40000800
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014e6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_TIM_MspPostInit+0x70>)
 8001504:	f000 fa8c 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40000800 	.word	0x40000800
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12b      	bne.n	8001596 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_UART_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001576:	230c      	movs	r3, #12
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001586:	2307      	movs	r3, #7
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_UART_MspInit+0x8c>)
 8001592:	f000 fa45 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 f8e0 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 80015fc:	f000 f826 	bl	800164c <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM4_IRQHandler+0x10>)
 800160a:	f001 fa8b 	bl	8002b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000d4 	.word	0x200000d4

08001618 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 800161c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001620:	f000 fb9c 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <SysTickFunction>:
#include "main.h"
#include "pid.h"
#include "encoders.h"


void SysTickFunction(void) {
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8001652:	f7ff fd5b 	bl	800110c <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8001656:	f7ff f9a9 	bl	80009ac <getRightEncoderCounts>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	f647 1318 	movw	r3, #31000	; 0x7918
 8001662:	429a      	cmp	r2, r3
 8001664:	dc15      	bgt.n	8001692 <SysTickFunction+0x46>
 8001666:	f7ff f9af 	bl	80009c8 <getLeftEncoderCounts>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	f647 1318 	movw	r3, #31000	; 0x7918
 8001672:	429a      	cmp	r2, r3
 8001674:	dc0d      	bgt.n	8001692 <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8001676:	f7ff f999 	bl	80009ac <getRightEncoderCounts>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <SysTickFunction+0x74>)
 8001680:	429a      	cmp	r2, r3
 8001682:	db06      	blt.n	8001692 <SysTickFunction+0x46>
 8001684:	f7ff f9a0 	bl	80009c8 <getLeftEncoderCounts>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <SysTickFunction+0x74>)
 800168e:	429a      	cmp	r2, r3
 8001690:	da11      	bge.n	80016b6 <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8001692:	f7ff f98b 	bl	80009ac <getRightEncoderCounts>
 8001696:	4603      	mov	r3, r0
 8001698:	b29c      	uxth	r4, r3
 800169a:	f7ff f995 	bl	80009c8 <getLeftEncoderCounts>
 800169e:	4603      	mov	r3, r0
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	1ae3      	subs	r3, r4, r3
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 80016a8:	f7ff f99e 	bl	80009e8 <resetEncoders>
		TIM2->CNT = (int16_t) difference; //set right encoder counts to difference
 80016ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b4:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	ffff86e8 	.word	0xffff86e8

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ee:	f7ff ff9b 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f002 f991 	bl	8003a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff f987 	bl	8000a08 <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001708:	08003aa0 	.word	0x08003aa0
  ldr r2, =_sbss
 800170c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001710:	20000188 	.word	0x20000188

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f92b 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fde2 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f943 	bl	8001a06 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001798:	f000 f90b 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000018 	.word	0x20000018
 80017b4:	20000020 	.word	0x20000020
 80017b8:	2000001c 	.word	0x2000001c

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000184 	.word	0x20000184

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000184 	.word	0x20000184

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e159      	b.n	8001cf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8148 	bne.w	8001cea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d130      	bne.n	8001ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d017      	beq.n	8001b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d123      	bne.n	8001b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a2 	beq.w	8001cea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a56      	ldr	r2, [pc, #344]	; (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc2:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_GPIO_Init+0x2ec>)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a49      	ldr	r2, [pc, #292]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x202>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a48      	ldr	r2, [pc, #288]	; (8001d14 <HAL_GPIO_Init+0x2f4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x1fe>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a47      	ldr	r2, [pc, #284]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x1fa>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a46      	ldr	r2, [pc, #280]	; (8001d1c <HAL_GPIO_Init+0x2fc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x1f6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a45      	ldr	r2, [pc, #276]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x1f2>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e008      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c22:	2300      	movs	r3, #0
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f002 0203 	and.w	r2, r2, #3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	4935      	ldr	r1, [pc, #212]	; (8001d0c <HAL_GPIO_Init+0x2ec>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c66:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c90:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	f67f aea2 	bls.w	8001a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	619a      	str	r2, [r3, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f8b6 	bl	8000eec <HAL_GPIO_EXTI_Callback>
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e267      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d075      	beq.n	8001e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d00c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d112      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc2:	4b82      	ldr	r3, [pc, #520]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dce:	d10b      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	4b7e      	ldr	r3, [pc, #504]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d05b      	beq.n	8001e94 <HAL_RCC_OscConfig+0x108>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d157      	bne.n	8001e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e242      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x74>
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6f      	ldr	r2, [pc, #444]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6c      	ldr	r2, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a65      	ldr	r2, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fcce 	bl	80017e4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fcca 	bl	80017e4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e207      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fcba 	bl	80017e4 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fcb6 	bl	80017e4 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1f3      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0xe8>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d063      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eba:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e1c7      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4937      	ldr	r1, [pc, #220]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	e03a      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_RCC_OscConfig+0x244>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff fc6f 	bl	80017e4 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fc6b 	bl	80017e4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1a8      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4925      	ldr	r1, [pc, #148]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_RCC_OscConfig+0x244>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff fc4e 	bl	80017e4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fc4a 	bl	80017e4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e187      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d036      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_RCC_OscConfig+0x248>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff fc2e 	bl	80017e4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fc2a 	bl	80017e4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e167      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x200>
 8001faa:	e01b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_OscConfig+0x248>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fc17 	bl	80017e4 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	e00e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fba:	f7ff fc13 	bl	80017e4 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d907      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e150      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470000 	.word	0x42470000
 8001fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd8:	4b88      	ldr	r3, [pc, #544]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8001fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ea      	bne.n	8001fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8097 	beq.w	8002120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff6:	4b81      	ldr	r3, [pc, #516]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b7d      	ldr	r3, [pc, #500]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a7c      	ldr	r2, [pc, #496]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b77      	ldr	r3, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0x474>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b74      	ldr	r3, [pc, #464]	; (8002200 <HAL_RCC_OscConfig+0x474>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a73      	ldr	r2, [pc, #460]	; (8002200 <HAL_RCC_OscConfig+0x474>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7ff fbd3 	bl	80017e4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff fbcf 	bl	80017e4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e10c      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x474>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x2ea>
 8002068:	4b64      	ldr	r3, [pc, #400]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	4a63      	ldr	r2, [pc, #396]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
 8002074:	e01c      	b.n	80020b0 <HAL_RCC_OscConfig+0x324>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x30c>
 800207e:	4b5f      	ldr	r3, [pc, #380]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a5e      	ldr	r2, [pc, #376]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a5b      	ldr	r2, [pc, #364]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0x324>
 8002098:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	4b55      	ldr	r3, [pc, #340]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	4a54      	ldr	r2, [pc, #336]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff fb94 	bl	80017e4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7ff fb90 	bl	80017e4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0cb      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ee      	beq.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7ff fb7e 	bl	80017e4 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7ff fb7a 	bl	80017e4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e0b5      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ee      	bne.n	80020ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002114:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	4a38      	ldr	r2, [pc, #224]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800211a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a1 	beq.w	800226c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b08      	cmp	r3, #8
 8002134:	d05c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d141      	bne.n	80021c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fb4e 	bl	80017e4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff fb4a 	bl	80017e4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e087      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	041b      	lsls	r3, r3, #16
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	491b      	ldr	r1, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff fb23 	bl	80017e4 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a2:	f7ff fb1f 	bl	80017e4 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e05c      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x416>
 80021c0:	e054      	b.n	800226c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fb0c 	bl	80017e4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fb08 	bl	80017e4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e045      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_OscConfig+0x470>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x444>
 80021ee:	e03d      	b.n	800226c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e038      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000
 8002204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x4ec>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d028      	beq.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d121      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d11a      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800223e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002240:	4293      	cmp	r3, r2
 8002242:	d111      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d107      	bne.n	8002268 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0cc      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d90c      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b8      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d0:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	494d      	ldr	r1, [pc, #308]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d044      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d119      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d003      	beq.n	800233a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002336:	2b03      	cmp	r3, #3
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e067      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4934      	ldr	r1, [pc, #208]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7ff fa3a 	bl	80017e4 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7ff fa36 	bl	80017e4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e04f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d20c      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e032      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002402:	f000 f821 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002406:	4602      	mov	r2, r0
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	490a      	ldr	r1, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	5ccb      	ldrb	r3, [r1, r3]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f99a 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023c00 	.word	0x40023c00
 8002438:	40023800 	.word	0x40023800
 800243c:	08003a78 	.word	0x08003a78
 8002440:	20000018 	.word	0x20000018
 8002444:	2000001c 	.word	0x2000001c

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800244c:	b094      	sub	sp, #80	; 0x50
 800244e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	647b      	str	r3, [r7, #68]	; 0x44
 8002454:	2300      	movs	r3, #0
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002458:	2300      	movs	r3, #0
 800245a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002460:	4b79      	ldr	r3, [pc, #484]	; (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d00d      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x40>
 800246c:	2b08      	cmp	r3, #8
 800246e:	f200 80e1 	bhi.w	8002634 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002476:	2b04      	cmp	r3, #4
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x3a>
 800247a:	e0db      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCC_GetSysClockFreq+0x204>)
 800247e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002480:	e0db      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_GetSysClockFreq+0x208>)
 8002484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002486:	e0d8      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002492:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	2200      	movs	r2, #0
 80024a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
 80024b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	f04f 0000 	mov.w	r0, #0
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024cc:	0150      	lsls	r0, r2, #5
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4621      	mov	r1, r4
 80024d4:	1a51      	subs	r1, r2, r1
 80024d6:	6139      	str	r1, [r7, #16]
 80024d8:	4629      	mov	r1, r5
 80024da:	eb63 0301 	sbc.w	r3, r3, r1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024ec:	4659      	mov	r1, fp
 80024ee:	018b      	lsls	r3, r1, #6
 80024f0:	4651      	mov	r1, sl
 80024f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024f6:	4651      	mov	r1, sl
 80024f8:	018a      	lsls	r2, r1, #6
 80024fa:	4651      	mov	r1, sl
 80024fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002500:	4659      	mov	r1, fp
 8002502:	eb63 0901 	sbc.w	r9, r3, r1
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800251a:	4690      	mov	r8, r2
 800251c:	4699      	mov	r9, r3
 800251e:	4623      	mov	r3, r4
 8002520:	eb18 0303 	adds.w	r3, r8, r3
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	462b      	mov	r3, r5
 8002528:	eb49 0303 	adc.w	r3, r9, r3
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800253a:	4629      	mov	r1, r5
 800253c:	024b      	lsls	r3, r1, #9
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002544:	4621      	mov	r1, r4
 8002546:	024a      	lsls	r2, r1, #9
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
 8002552:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002558:	f7fe f882 	bl	8000660 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002564:	e058      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	2200      	movs	r2, #0
 800256e:	4618      	mov	r0, r3
 8002570:	4611      	mov	r1, r2
 8002572:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002580:	4642      	mov	r2, r8
 8002582:	464b      	mov	r3, r9
 8002584:	f04f 0000 	mov.w	r0, #0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	0159      	lsls	r1, r3, #5
 800258e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002592:	0150      	lsls	r0, r2, #5
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4641      	mov	r1, r8
 800259a:	ebb2 0a01 	subs.w	sl, r2, r1
 800259e:	4649      	mov	r1, r9
 80025a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025b8:	ebb2 040a 	subs.w	r4, r2, sl
 80025bc:	eb63 050b 	sbc.w	r5, r3, fp
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	00eb      	lsls	r3, r5, #3
 80025ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ce:	00e2      	lsls	r2, r4, #3
 80025d0:	4614      	mov	r4, r2
 80025d2:	461d      	mov	r5, r3
 80025d4:	4643      	mov	r3, r8
 80025d6:	18e3      	adds	r3, r4, r3
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	464b      	mov	r3, r9
 80025dc:	eb45 0303 	adc.w	r3, r5, r3
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ee:	4629      	mov	r1, r5
 80025f0:	028b      	lsls	r3, r1, #10
 80025f2:	4621      	mov	r1, r4
 80025f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f8:	4621      	mov	r1, r4
 80025fa:	028a      	lsls	r2, r1, #10
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	2200      	movs	r2, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	61fa      	str	r2, [r7, #28]
 8002608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800260c:	f7fe f828 	bl	8000660 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800262a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002632:	e002      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetSysClockFreq+0x204>)
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800263c:	4618      	mov	r0, r3
 800263e:	3750      	adds	r7, #80	; 0x50
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	00f42400 	.word	0x00f42400
 8002650:	007a1200 	.word	0x007a1200

08002654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCC_GetHCLKFreq+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000018 	.word	0x20000018

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002670:	f7ff fff0 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a9b      	lsrs	r3, r3, #10
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08003a88 	.word	0x08003a88

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002698:	f7ff ffdc 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0b5b      	lsrs	r3, r3, #13
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08003a88 	.word	0x08003a88

080026bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e041      	b.n	8002752 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe feb8 	bl	8001458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f000 fc0e 	bl	8002f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_TIM_PWM_Start+0x24>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e022      	b.n	80027c6 <HAL_TIM_PWM_Start+0x6a>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b04      	cmp	r3, #4
 8002784:	d109      	bne.n	800279a <HAL_TIM_PWM_Start+0x3e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	e015      	b.n	80027c6 <HAL_TIM_PWM_Start+0x6a>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d109      	bne.n	80027b4 <HAL_TIM_PWM_Start+0x58>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e008      	b.n	80027c6 <HAL_TIM_PWM_Start+0x6a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e068      	b.n	80028a0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <HAL_TIM_PWM_Start+0x82>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027dc:	e013      	b.n	8002806 <HAL_TIM_PWM_Start+0xaa>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0x92>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ec:	e00b      	b.n	8002806 <HAL_TIM_PWM_Start+0xaa>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_PWM_Start+0xa2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027fc:	e003      	b.n	8002806 <HAL_TIM_PWM_Start+0xaa>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd90 	bl	8003334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <HAL_TIM_PWM_Start+0x14c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d107      	bne.n	800282e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_TIM_PWM_Start+0x14c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_TIM_PWM_Start+0x10e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d013      	beq.n	800286a <HAL_TIM_PWM_Start+0x10e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_TIM_PWM_Start+0x150>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_TIM_PWM_Start+0x10e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_TIM_PWM_Start+0x154>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_TIM_PWM_Start+0x10e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <HAL_TIM_PWM_Start+0x158>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIM_PWM_Start+0x10e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_TIM_PWM_Start+0x15c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d111      	bne.n	800288e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b06      	cmp	r3, #6
 800287a:	d010      	beq.n	800289e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	e007      	b.n	800289e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40010000 	.word	0x40010000
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40000800 	.word	0x40000800
 80028b4:	40000c00 	.word	0x40000c00
 80028b8:	40014000 	.word	0x40014000

080028bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e097      	b.n	8002a00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe fd3d 	bl	8001364 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002900:	f023 0307 	bic.w	r3, r3, #7
 8002904:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f000 fb03 	bl	8002f1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	4313      	orrs	r3, r2
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800295c:	f023 030c 	bic.w	r3, r3, #12
 8002960:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800296c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4313      	orrs	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	011a      	lsls	r2, r3, #4
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	031b      	lsls	r3, r3, #12
 800298c:	4313      	orrs	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800299a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4313      	orrs	r3, r2
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d110      	bne.n	8002a5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d102      	bne.n	8002a44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a3e:	7b7b      	ldrb	r3, [r7, #13]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e069      	b.n	8002b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a58:	e031      	b.n	8002abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d110      	bne.n	8002a82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d102      	bne.n	8002a6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a66:	7b3b      	ldrb	r3, [r7, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d001      	beq.n	8002a70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e055      	b.n	8002b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a80:	e01d      	b.n	8002abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d108      	bne.n	8002a9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a8e:	7b7b      	ldrb	r3, [r7, #13]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a94:	7b3b      	ldrb	r3, [r7, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e03e      	b.n	8002b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_TIM_Encoder_Start+0xc4>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d008      	beq.n	8002adc <HAL_TIM_Encoder_Start+0xd4>
 8002aca:	e00f      	b.n	8002aec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fc2d 	bl	8003334 <TIM_CCxChannelCmd>
      break;
 8002ada:	e016      	b.n	8002b0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fc25 	bl	8003334 <TIM_CCxChannelCmd>
      break;
 8002aea:	e00e      	b.n	8002b0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fc1d 	bl	8003334 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2201      	movs	r2, #1
 8002b00:	2104      	movs	r1, #4
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fc16 	bl	8003334 <TIM_CCxChannelCmd>
      break;
 8002b08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0202 	mvn.w	r2, #2
 8002b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f9ba 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f9ac 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f9bd 	bl	8002ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0204 	mvn.w	r2, #4
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f990 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f982 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f993 	bl	8002ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0208 	mvn.w	r2, #8
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f966 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f958 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f969 	bl	8002ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0210 	mvn.w	r2, #16
 8002c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2208      	movs	r2, #8
 8002c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f93c 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f92e 	bl	8002ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f93f 	bl	8002ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0201 	mvn.w	r2, #1
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f908 	bl	8002eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b80      	cmp	r3, #128	; 0x80
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fbce 	bl	8003470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f904 	bl	8002f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0220 	mvn.w	r2, #32
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fb98 	bl	800345c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0ae      	b.n	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	f200 809f 	bhi.w	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d62:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002ea1 	.word	0x08002ea1
 8002d70:	08002ea1 	.word	0x08002ea1
 8002d74:	08002ea1 	.word	0x08002ea1
 8002d78:	08002ddd 	.word	0x08002ddd
 8002d7c:	08002ea1 	.word	0x08002ea1
 8002d80:	08002ea1 	.word	0x08002ea1
 8002d84:	08002ea1 	.word	0x08002ea1
 8002d88:	08002e1f 	.word	0x08002e1f
 8002d8c:	08002ea1 	.word	0x08002ea1
 8002d90:	08002ea1 	.word	0x08002ea1
 8002d94:	08002ea1 	.word	0x08002ea1
 8002d98:	08002e5f 	.word	0x08002e5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f93a 	bl	800301c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6999      	ldr	r1, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	619a      	str	r2, [r3, #24]
      break;
 8002dda:	e064      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f980 	bl	80030e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6999      	ldr	r1, [r3, #24]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
      break;
 8002e1c:	e043      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f9cb 	bl	80031c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0208 	orr.w	r2, r2, #8
 8002e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0204 	bic.w	r2, r2, #4
 8002e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69d9      	ldr	r1, [r3, #28]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	61da      	str	r2, [r3, #28]
      break;
 8002e5c:	e023      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fa15 	bl	8003294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	021a      	lsls	r2, r3, #8
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	61da      	str	r2, [r3, #28]
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <TIM_Base_SetConfig+0xe4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00f      	beq.n	8002f54 <TIM_Base_SetConfig+0x38>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3a:	d00b      	beq.n	8002f54 <TIM_Base_SetConfig+0x38>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a31      	ldr	r2, [pc, #196]	; (8003004 <TIM_Base_SetConfig+0xe8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_Base_SetConfig+0x38>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a30      	ldr	r2, [pc, #192]	; (8003008 <TIM_Base_SetConfig+0xec>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_Base_SetConfig+0x38>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	; (800300c <TIM_Base_SetConfig+0xf0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d108      	bne.n	8002f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a25      	ldr	r2, [pc, #148]	; (8003000 <TIM_Base_SetConfig+0xe4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01b      	beq.n	8002fa6 <TIM_Base_SetConfig+0x8a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d017      	beq.n	8002fa6 <TIM_Base_SetConfig+0x8a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <TIM_Base_SetConfig+0xe8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <TIM_Base_SetConfig+0x8a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a21      	ldr	r2, [pc, #132]	; (8003008 <TIM_Base_SetConfig+0xec>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00f      	beq.n	8002fa6 <TIM_Base_SetConfig+0x8a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a20      	ldr	r2, [pc, #128]	; (800300c <TIM_Base_SetConfig+0xf0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_Base_SetConfig+0x8a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <TIM_Base_SetConfig+0xf4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <TIM_Base_SetConfig+0x8a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <TIM_Base_SetConfig+0xf8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_Base_SetConfig+0x8a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <TIM_Base_SetConfig+0xfc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <TIM_Base_SetConfig+0xe4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40014000 	.word	0x40014000
 8003014:	40014400 	.word	0x40014400
 8003018:	40014800 	.word	0x40014800

0800301c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f023 0302 	bic.w	r3, r3, #2
 8003064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <TIM_OC1_SetConfig+0xc8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10c      	bne.n	8003092 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f023 0308 	bic.w	r3, r3, #8
 800307e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <TIM_OC1_SetConfig+0xc8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40010000 	.word	0x40010000

080030e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f023 0210 	bic.w	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0320 	bic.w	r3, r3, #32
 8003132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <TIM_OC2_SetConfig+0xd4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10d      	bne.n	8003164 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <TIM_OC2_SetConfig+0xd4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d113      	bne.n	8003194 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000

080031c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <TIM_OC3_SetConfig+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10d      	bne.n	800323a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <TIM_OC3_SetConfig+0xd0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d113      	bne.n	800326a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	621a      	str	r2, [r3, #32]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40010000 	.word	0x40010000

08003294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	031b      	lsls	r3, r3, #12
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <TIM_OC4_SetConfig+0x9c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000

08003334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2201      	movs	r2, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1a      	ldr	r2, [r3, #32]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	43db      	mvns	r3, r3
 8003356:	401a      	ands	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003394:	2302      	movs	r3, #2
 8003396:	e050      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d018      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d013      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a16      	ldr	r2, [pc, #88]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10c      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40014000 	.word	0x40014000

0800345c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03f      	b.n	8003516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe f836 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f829 	bl	8003520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b0c0      	sub	sp, #256	; 0x100
 8003526:	af00      	add	r7, sp, #0
 8003528:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	68d9      	ldr	r1, [r3, #12]
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	ea40 0301 	orr.w	r3, r0, r1
 8003548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	431a      	orrs	r2, r3
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003578:	f021 010c 	bic.w	r1, r1, #12
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003586:	430b      	orrs	r3, r1
 8003588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	6999      	ldr	r1, [r3, #24]
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	ea40 0301 	orr.w	r3, r0, r1
 80035a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b8f      	ldr	r3, [pc, #572]	; (80037ec <UART_SetConfig+0x2cc>)
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d005      	beq.n	80035c0 <UART_SetConfig+0xa0>
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b8d      	ldr	r3, [pc, #564]	; (80037f0 <UART_SetConfig+0x2d0>)
 80035bc:	429a      	cmp	r2, r3
 80035be:	d104      	bne.n	80035ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff f868 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 80035c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035c8:	e003      	b.n	80035d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ca:	f7ff f84f 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 80035ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035dc:	f040 810c 	bne.w	80037f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e4:	2200      	movs	r2, #0
 80035e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035f2:	4622      	mov	r2, r4
 80035f4:	462b      	mov	r3, r5
 80035f6:	1891      	adds	r1, r2, r2
 80035f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035fa:	415b      	adcs	r3, r3
 80035fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003602:	4621      	mov	r1, r4
 8003604:	eb12 0801 	adds.w	r8, r2, r1
 8003608:	4629      	mov	r1, r5
 800360a:	eb43 0901 	adc.w	r9, r3, r1
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800361a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800361e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003622:	4690      	mov	r8, r2
 8003624:	4699      	mov	r9, r3
 8003626:	4623      	mov	r3, r4
 8003628:	eb18 0303 	adds.w	r3, r8, r3
 800362c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003630:	462b      	mov	r3, r5
 8003632:	eb49 0303 	adc.w	r3, r9, r3
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003646:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800364a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800364e:	460b      	mov	r3, r1
 8003650:	18db      	adds	r3, r3, r3
 8003652:	653b      	str	r3, [r7, #80]	; 0x50
 8003654:	4613      	mov	r3, r2
 8003656:	eb42 0303 	adc.w	r3, r2, r3
 800365a:	657b      	str	r3, [r7, #84]	; 0x54
 800365c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003664:	f7fc fffc 	bl	8000660 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <UART_SetConfig+0x2d4>)
 800366e:	fba3 2302 	umull	r2, r3, r3, r2
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	011c      	lsls	r4, r3, #4
 8003676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003680:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003688:	4642      	mov	r2, r8
 800368a:	464b      	mov	r3, r9
 800368c:	1891      	adds	r1, r2, r2
 800368e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003690:	415b      	adcs	r3, r3
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003698:	4641      	mov	r1, r8
 800369a:	eb12 0a01 	adds.w	sl, r2, r1
 800369e:	4649      	mov	r1, r9
 80036a0:	eb43 0b01 	adc.w	fp, r3, r1
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b8:	4692      	mov	sl, r2
 80036ba:	469b      	mov	fp, r3
 80036bc:	4643      	mov	r3, r8
 80036be:	eb1a 0303 	adds.w	r3, sl, r3
 80036c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036c6:	464b      	mov	r3, r9
 80036c8:	eb4b 0303 	adc.w	r3, fp, r3
 80036cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036e4:	460b      	mov	r3, r1
 80036e6:	18db      	adds	r3, r3, r3
 80036e8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ea:	4613      	mov	r3, r2
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	647b      	str	r3, [r7, #68]	; 0x44
 80036f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036fa:	f7fc ffb1 	bl	8000660 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4611      	mov	r1, r2
 8003704:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <UART_SetConfig+0x2d4>)
 8003706:	fba3 2301 	umull	r2, r3, r3, r1
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2264      	movs	r2, #100	; 0x64
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	1acb      	subs	r3, r1, r3
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800371a:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <UART_SetConfig+0x2d4>)
 800371c:	fba3 2302 	umull	r2, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003728:	441c      	add	r4, r3
 800372a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003734:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800373c:	4642      	mov	r2, r8
 800373e:	464b      	mov	r3, r9
 8003740:	1891      	adds	r1, r2, r2
 8003742:	63b9      	str	r1, [r7, #56]	; 0x38
 8003744:	415b      	adcs	r3, r3
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800374c:	4641      	mov	r1, r8
 800374e:	1851      	adds	r1, r2, r1
 8003750:	6339      	str	r1, [r7, #48]	; 0x30
 8003752:	4649      	mov	r1, r9
 8003754:	414b      	adcs	r3, r1
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003764:	4659      	mov	r1, fp
 8003766:	00cb      	lsls	r3, r1, #3
 8003768:	4651      	mov	r1, sl
 800376a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800376e:	4651      	mov	r1, sl
 8003770:	00ca      	lsls	r2, r1, #3
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	4603      	mov	r3, r0
 8003778:	4642      	mov	r2, r8
 800377a:	189b      	adds	r3, r3, r2
 800377c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003780:	464b      	mov	r3, r9
 8003782:	460a      	mov	r2, r1
 8003784:	eb42 0303 	adc.w	r3, r2, r3
 8003788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003798:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800379c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037a0:	460b      	mov	r3, r1
 80037a2:	18db      	adds	r3, r3, r3
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a6:	4613      	mov	r3, r2
 80037a8:	eb42 0303 	adc.w	r3, r2, r3
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037b6:	f7fc ff53 	bl	8000660 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <UART_SetConfig+0x2d4>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <UART_SetConfig+0x2d4>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 0207 	and.w	r2, r3, #7
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4422      	add	r2, r4
 80037e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e8:	e106      	b.n	80039f8 <UART_SetConfig+0x4d8>
 80037ea:	bf00      	nop
 80037ec:	40011000 	.word	0x40011000
 80037f0:	40011400 	.word	0x40011400
 80037f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003802:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800380a:	4642      	mov	r2, r8
 800380c:	464b      	mov	r3, r9
 800380e:	1891      	adds	r1, r2, r2
 8003810:	6239      	str	r1, [r7, #32]
 8003812:	415b      	adcs	r3, r3
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800381a:	4641      	mov	r1, r8
 800381c:	1854      	adds	r4, r2, r1
 800381e:	4649      	mov	r1, r9
 8003820:	eb43 0501 	adc.w	r5, r3, r1
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	00eb      	lsls	r3, r5, #3
 800382e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003832:	00e2      	lsls	r2, r4, #3
 8003834:	4614      	mov	r4, r2
 8003836:	461d      	mov	r5, r3
 8003838:	4643      	mov	r3, r8
 800383a:	18e3      	adds	r3, r4, r3
 800383c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003840:	464b      	mov	r3, r9
 8003842:	eb45 0303 	adc.w	r3, r5, r3
 8003846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003856:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003866:	4629      	mov	r1, r5
 8003868:	008b      	lsls	r3, r1, #2
 800386a:	4621      	mov	r1, r4
 800386c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003870:	4621      	mov	r1, r4
 8003872:	008a      	lsls	r2, r1, #2
 8003874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003878:	f7fc fef2 	bl	8000660 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4b60      	ldr	r3, [pc, #384]	; (8003a04 <UART_SetConfig+0x4e4>)
 8003882:	fba3 2302 	umull	r2, r3, r3, r2
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	011c      	lsls	r4, r3, #4
 800388a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003894:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800389c:	4642      	mov	r2, r8
 800389e:	464b      	mov	r3, r9
 80038a0:	1891      	adds	r1, r2, r2
 80038a2:	61b9      	str	r1, [r7, #24]
 80038a4:	415b      	adcs	r3, r3
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ac:	4641      	mov	r1, r8
 80038ae:	1851      	adds	r1, r2, r1
 80038b0:	6139      	str	r1, [r7, #16]
 80038b2:	4649      	mov	r1, r9
 80038b4:	414b      	adcs	r3, r1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038c4:	4659      	mov	r1, fp
 80038c6:	00cb      	lsls	r3, r1, #3
 80038c8:	4651      	mov	r1, sl
 80038ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ce:	4651      	mov	r1, sl
 80038d0:	00ca      	lsls	r2, r1, #3
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	4642      	mov	r2, r8
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038e0:	464b      	mov	r3, r9
 80038e2:	460a      	mov	r2, r1
 80038e4:	eb42 0303 	adc.w	r3, r2, r3
 80038e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003904:	4649      	mov	r1, r9
 8003906:	008b      	lsls	r3, r1, #2
 8003908:	4641      	mov	r1, r8
 800390a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800390e:	4641      	mov	r1, r8
 8003910:	008a      	lsls	r2, r1, #2
 8003912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003916:	f7fc fea3 	bl	8000660 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4611      	mov	r1, r2
 8003920:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <UART_SetConfig+0x4e4>)
 8003922:	fba3 2301 	umull	r2, r3, r3, r1
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2264      	movs	r2, #100	; 0x64
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	1acb      	subs	r3, r1, r3
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	3332      	adds	r3, #50	; 0x32
 8003934:	4a33      	ldr	r2, [pc, #204]	; (8003a04 <UART_SetConfig+0x4e4>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003940:	441c      	add	r4, r3
 8003942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003946:	2200      	movs	r2, #0
 8003948:	673b      	str	r3, [r7, #112]	; 0x70
 800394a:	677a      	str	r2, [r7, #116]	; 0x74
 800394c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	1891      	adds	r1, r2, r2
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	415b      	adcs	r3, r3
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003960:	4641      	mov	r1, r8
 8003962:	1851      	adds	r1, r2, r1
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	4649      	mov	r1, r9
 8003968:	414b      	adcs	r3, r1
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003978:	4659      	mov	r1, fp
 800397a:	00cb      	lsls	r3, r1, #3
 800397c:	4651      	mov	r1, sl
 800397e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003982:	4651      	mov	r1, sl
 8003984:	00ca      	lsls	r2, r1, #3
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	4603      	mov	r3, r0
 800398c:	4642      	mov	r2, r8
 800398e:	189b      	adds	r3, r3, r2
 8003990:	66bb      	str	r3, [r7, #104]	; 0x68
 8003992:	464b      	mov	r3, r9
 8003994:	460a      	mov	r2, r1
 8003996:	eb42 0303 	adc.w	r3, r2, r3
 800399a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	663b      	str	r3, [r7, #96]	; 0x60
 80039a6:	667a      	str	r2, [r7, #100]	; 0x64
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039b4:	4649      	mov	r1, r9
 80039b6:	008b      	lsls	r3, r1, #2
 80039b8:	4641      	mov	r1, r8
 80039ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039be:	4641      	mov	r1, r8
 80039c0:	008a      	lsls	r2, r1, #2
 80039c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039c6:	f7fc fe4b 	bl	8000660 <__aeabi_uldivmod>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <UART_SetConfig+0x4e4>)
 80039d0:	fba3 1302 	umull	r1, r3, r3, r2
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	2164      	movs	r1, #100	; 0x64
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	3332      	adds	r3, #50	; 0x32
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <UART_SetConfig+0x4e4>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4422      	add	r2, r4
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039fe:	46bd      	mov	sp, r7
 8003a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a04:	51eb851f 	.word	0x51eb851f

08003a08 <memset>:
 8003a08:	4402      	add	r2, r0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d100      	bne.n	8003a12 <memset+0xa>
 8003a10:	4770      	bx	lr
 8003a12:	f803 1b01 	strb.w	r1, [r3], #1
 8003a16:	e7f9      	b.n	8003a0c <memset+0x4>

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4d0d      	ldr	r5, [pc, #52]	; (8003a50 <__libc_init_array+0x38>)
 8003a1c:	4c0d      	ldr	r4, [pc, #52]	; (8003a54 <__libc_init_array+0x3c>)
 8003a1e:	1b64      	subs	r4, r4, r5
 8003a20:	10a4      	asrs	r4, r4, #2
 8003a22:	2600      	movs	r6, #0
 8003a24:	42a6      	cmp	r6, r4
 8003a26:	d109      	bne.n	8003a3c <__libc_init_array+0x24>
 8003a28:	4d0b      	ldr	r5, [pc, #44]	; (8003a58 <__libc_init_array+0x40>)
 8003a2a:	4c0c      	ldr	r4, [pc, #48]	; (8003a5c <__libc_init_array+0x44>)
 8003a2c:	f000 f818 	bl	8003a60 <_init>
 8003a30:	1b64      	subs	r4, r4, r5
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	2600      	movs	r6, #0
 8003a36:	42a6      	cmp	r6, r4
 8003a38:	d105      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a40:	4798      	blx	r3
 8003a42:	3601      	adds	r6, #1
 8003a44:	e7ee      	b.n	8003a24 <__libc_init_array+0xc>
 8003a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4a:	4798      	blx	r3
 8003a4c:	3601      	adds	r6, #1
 8003a4e:	e7f2      	b.n	8003a36 <__libc_init_array+0x1e>
 8003a50:	08003a98 	.word	0x08003a98
 8003a54:	08003a98 	.word	0x08003a98
 8003a58:	08003a98 	.word	0x08003a98
 8003a5c:	08003a9c 	.word	0x08003a9c

08003a60 <_init>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr

08003a6c <_fini>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr
